<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang Korean Community</title>
    <link>https://golangkorea.github.io/tags/compiler/index.xml</link>
    <description>Recent content on Golang Korean Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://golangkorea.github.io/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang의 내부, 2부: Go 컴파일러 들여다 보기</title>
      <link>https://golangkorea.github.io/post/golang-internals/part2/</link>
      <pubDate>Thu, 15 Sep 2016 05:53:48 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/golang-internals/part2/</guid>
      <description>

&lt;p&gt;독자는 인터페이스 레퍼런스를 통해 변수를 사용할 경우 Go 런타임내에서 어떤 일이 있는지 정확하게 알고 있는가? 이 질문에 쉽게 답할 수 없는 이유는 어떤 인터페이스를 구현하는 타입의 경우 그 인터페이스를 가리키는 어떤 레퍼런스도 갖고 있지 않기 때문이다. 하지만 여전히 시도는 해 볼 수 있는데 &lt;a href=&#34;https://golangkorea.github.io/post/golang-internals/part1/&#34;&gt;이전 블로그 포스트&lt;/a&gt;에서 논했던 Go 컴파일러의 지식을 이용하는 것이다.&lt;/p&gt;

&lt;p&gt;그러면, Go 컴파일러속으로 잠수해 들어가자: 간단한 Go 프로그램을 제작하고 Go 타입캐스팅(typecasting)이 내부적으로 어떻게 동작하는 지 살펴보겠다. 이 것을 예로 들면서, 어떻게 노드 트리가 생성되고 사용되는지 설명하겠다. 이렇게 함으로써 독자도 이 지식을 다른 Go 컴파일러 기능에 적용할 수 있을 것이다.&lt;/p&gt;

&lt;h1 id=&#34;시작하기-전에&#34;&gt;시작하기 전에&lt;/h1&gt;

&lt;p&gt;실험을 하기 전에, (Go 툴을 쓰는 것이 아니라) Go 컴파일러를 직접 사용할 필요가 있다. 다음 명령을 사용해 이 기능에 접근할 수 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;go tool 6g test.go
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령으로 &lt;em&gt;test.go&lt;/em&gt; 소스파일은 컴파일되고 오브젝트 파일(object file)이 만들어 진다. 여기서 &lt;em&gt;6g&lt;/em&gt; 는 AMD64 아키텍쳐인 저자의 머신을 위한 컴파일러의 이름이다. 다른 아키텍쳐에서는 상응하는 컴파일러를 사용해야 함을 주목하라.&lt;/p&gt;

&lt;p&gt;컴파일러를 직접 사용할 때 유용한 커맨드 라인 인수들을 사용할 수 있는데, 자세한 내용은 &lt;a href=&#34;https://golang.org/cmd/gc/#hdr-Command_Line&#34;&gt;여기&lt;/a&gt;를 참고하라. 이 실험을 위해서, 노드 트리의 레이아웃을 출력해 주는 &lt;em&gt;-W&lt;/em&gt; 플래그를 사용하겠다.&lt;/p&gt;

&lt;h1 id=&#34;간단한-go-프로그램-만들기&#34;&gt;간단한 Go 프로그램 만들기&lt;/h1&gt;

&lt;p&gt;우선 간단한 Go 프로그램을 만들자. 저자의 버전은 다음과 같다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  1  package main
  2
  3  type I interface {
  4          DoSomeWork()
  5  }
  6
  7  type T struct {
  8          a int
  9  }
 10
 11  func (t *T) DoSomeWork() {
 12  }
 13
 14  func main() {
 15          t := &amp;amp;T{}
 16          i := I(t)
 17          print(i)
 18  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;정말 간단하지 않은가? 불필요하게 생각되는 단 하나는 17째 줄인데, &lt;em&gt;i&lt;/em&gt; 변수를 출력하는 부분이다. 불필요하다고 판단됨에도 불구하고 이 줄이 없다면, &lt;em&gt;i&lt;/em&gt; 는 사용하지 않은 변수로 간주되어 프로그램은 컴파일 되지 않을 것이다. 다음 단계는 이 프로그램을 &lt;em&gt;-W&lt;/em&gt; 를 사용해 컴파일 하는 것이다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;go tool 6g -W test.go
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령을 실행한 후에, 프로그램내 정의된 각 메서드에 해당하는 노드 트리를 포함한 출력을 보게 될 것이다. 이 경우, &lt;em&gt;main&lt;/em&gt; 과 &lt;em&gt;init&lt;/em&gt; 메서드가 있다. &lt;em&gt;init&lt;/em&gt; 메서드가 언급된 이유는 모든 프로그램에 암시적으로 정의되어 있기 때문인데, 실제로 여기에서는 다루지 않겠다.&lt;/p&gt;

&lt;p&gt;각 메서드마다, 컴파일러는 두개의 노드트리 버전을 출력한다. 첫번째는 소스파일을 파싱하고 얻는 노드 트리의 원본이고 두번째는 타입체킹후 모든 필요한 수정을 거친 버전이다.&lt;/p&gt;

&lt;h1 id=&#34;main-메서드의-노드-트리에-대한-이해&#34;&gt;main 메서드의 노드 트리에 대한 이해&lt;/h1&gt;

&lt;p&gt;우선 main 메서드에서 나온 노드 트리의 원본을 자세히 들여다 보고 정확하게 무슨 일이 일어나고 있는지를 이해하기 위한 시도를 해보자.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;DCL l(15)
.   NAME-main.t u(1) a(1) g(1) l(15) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) PTR64-*main.T

AS l(15) colas(1) tc(1)
.   NAME-main.t u(1) a(1) g(1) l(15) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) PTR64-*main.T
.   PTRLIT l(15) esc(no) ld(1) tc(1) PTR64-*main.T
.   .   STRUCTLIT l(15) tc(1) main.T
.   .   .   TYPE &amp;lt;S&amp;gt; l(15) tc(1) implicit(1) type=PTR64-*main.T PTR64-*main.T

DCL l(16)
.   NAME-main.i u(1) a(1) g(2) l(16) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) main.I

AS l(16) tc(1)
.   NAME-main.autotmp_0000 u(1) a(1) l(16) x(0+0) class(PAUTO) esc(N) tc(1) used(1) PTR64-*main.T
.   NAME-main.t u(1) a(1) g(1) l(15) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) PTR64-*main.T

AS l(16) colas(1) tc(1)
.   NAME-main.i u(1) a(1) g(2) l(16) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) main.I
.   CONVIFACE l(16) tc(1) main.I
.   .   NAME-main.autotmp_0000 u(1) a(1) l(16) x(0+0) class(PAUTO) esc(N) tc(1) used(1) PTR64-*main.T

VARKILL l(16) tc(1)
.   NAME-main.autotmp_0000 u(1) a(1) l(16) x(0+0) class(PAUTO) esc(N) tc(1) used(1) PTR64-*main.T

PRINT l(17) tc(1)
PRINT-list
.   NAME-main.i u(1) a(1) g(2) l(16) x(0+0) class(PAUTO) f(1) ld(1) tc(1) used(1) main.I
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래 설명할 때는 불필요한 부분을 모두 제거한 요약한 버전을 사용하겠다.&lt;/p&gt;

&lt;p&gt;첫번째 노드는 꽤 단순하다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;DCL l(15)
.   NAME-main.t l(15) PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;첫번째 노드는 선언 노드이다. &lt;em&gt;l(15)&lt;/em&gt; 는 노드가 줄 15에 정의되어 있음을 알려준다. 선언 노드는 &lt;em&gt;main.t&lt;/em&gt; 변수를 나타내는 이름 노드(name node)에 레퍼런스를 갖는다. 변수가 정의된 곳은 main 패키지이고 실제로 &lt;em&gt;main.T&lt;/em&gt; 타입를 가리키는 64비트 포인터이다. 15째 줄을 보면 어떤 선언이 되어 있는지 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;다음 것은 약간 까다롭다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;AS l(15)
.   NAME-main.t l(15) PTR64-*main.T
.   PTRLIT l(15) PTR64-*main.T
.   .   STRUCTLIT l(15) main.T
.   .   .   TYPE l(15) type=PTR64-*main.T PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;최상위 노드(root node)는 할당(assignment) 노드이다. 첫번째 자식노드는 이름 노드(name node)로 &lt;em&gt;main.t&lt;/em&gt; 변수를 대표한다. 두번째 자식노드는 &lt;em&gt;main.t&lt;/em&gt; 에 할당되는, 포인터 리터럴 노드이다: &amp;amp;를 생각하라. 이 노드는 struct 리터럴 노드를 자식으로 갖고 있고, 그 노드는 또 실제 타입인 (&lt;em&gt;main.T&lt;/em&gt;)를 대표하는 타입 노드를 포인터로 가리킨다.&lt;/p&gt;

&lt;p&gt;다음 노드는 또 다른 선언이다. 이번에는 &lt;em&gt;main.I&lt;/em&gt; 타입에 속하는 &lt;em&gt;main.i&lt;/em&gt; 변수의 선언이다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;DCL l(16)
.   NAME-main.i l(16) main.I
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런 다음, 컴파일러는 또 다른 변수, &lt;em&gt;autotmp_0000&lt;/em&gt; 를 만들고, &lt;em&gt;main.t&lt;/em&gt; 변수를 할당한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;AS l(16) tc(1)
.   NAME-main.autotmp_0000 l(16) PTR64-*main.T
.   NAME-main.t l(15) PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;마침내, 흥미로운 노드들에 도착했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;AS l(16)
.   NAME-main.i l(16)main.I
.   CONVIFACE l(16) main.I
.   .   NAME-main.autotmp_0000 PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기를 보면, 컴파일러가 &lt;em&gt;CONVIFACE&lt;/em&gt; 라고 불리는 특별한 노드를 &lt;em&gt;main.i&lt;/em&gt; 에 할당하는 것을 볼 수 있다. 하지만 이것만으로는 실제로 내부에서 어떤 일이 일어나는지 알 수 없다. 한가지 방법은 모든 모드 트리 수정이 적용되고 난 후에 main 메서드의 노드 트리속을 들여다 보는 것인데, 출력된 내용 중 &amp;ldquo;after walk main&amp;rdquo; 라는 섹션내의 정보를 통해 알아보는 것이다.&lt;/p&gt;

&lt;h1 id=&#34;컴파일러는-어떻게-할당노드를-번역하는가&#34;&gt;컴파일러는 어떻게 할당노드를 번역하는가&lt;/h1&gt;

&lt;p&gt;아래를 보면 컴파일러가 어떻게 할당 노드(assignment node)를 번역하는 지 알 수 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;AS-init
.   AS l(16)
.   .   NAME-main.autotmp_0003 l(16) PTR64-*uint8
.   .   NAME-go.itab.*&amp;quot;&amp;quot;.T.&amp;quot;&amp;quot;.I l(16) PTR64-*uint8

.   IF l(16)
.   IF-test
.   .   EQ l(16) bool
.   .   .   NAME-main.autotmp_0003 l(16) PTR64-*uint8
.   .   .   LITERAL-nil I(16) PTR64-*uint8
.   IF-body
.   .   AS l(16)
.   .   .   NAME-main.autotmp_0003 l(16) PTR64-*uint8
.   .   .   CALLFUNC l(16) PTR64-*byte
.   .   .   .   NAME-runtime.typ2Itab l(2) FUNC-funcSTRUCT-(FIELD-
.   .   .   .   .   NAME-runtime.typ·2 l(2) PTR64-*byte, FIELD-
.   .   .   .   .   NAME-runtime.typ2·3 l(2) PTR64-*byte PTR64-*byte, FIELD-
.   .   .   .   .   NAME-runtime.cache·4 l(2) PTR64-*PTR64-*byte PTR64-*PTR64-*byte) PTR64-*byte
.   .   .   CALLFUNC-list
.   .   .   .   AS l(16)
.   .   .   .   .   INDREG-SP l(16) runtime.typ·2 G0 PTR64-*byte
.   .   .   .   .   ADDR l(16) PTR64-*uint8
.   .   .   .   .   .   NAME-type.*&amp;quot;&amp;quot;.T l(11) uint8

.   .   .   .   AS l(16)
.   .   .   .   .   INDREG-SP l(16) runtime.typ2·3 G0 PTR64-*byte
.   .   .   .   .   ADDR l(16) PTR64-*uint8
.   .   .   .   .   .   NAME-type.&amp;quot;&amp;quot;.I l(16) uint8

.   .   .   .   AS l(16)
.   .   .   .   .   INDREG-SP l(16) runtime.cache·4 G0 PTR64-*PTR64-*byte
.   .   .   .   .   ADDR l(16) PTR64-*PTR64-*uint8
.   .   .   .   .   .   NAME-go.itab.*&amp;quot;&amp;quot;.T.&amp;quot;&amp;quot;.I l(16) PTR64-*uint8
AS l(16)
.   NAME-main.i l(16) main.I
.   EFACE l(16) main.I
.   .   NAME-main.autotmp_0003 l(16) PTR64-*uint8
.   .   NAME-main.autotmp_0000 l(16) PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;출력을 통해 볼 수 있듯이, 컴파일러는 우선 초기화 노드 리스트 (&lt;em&gt;AS-init&lt;/em&gt;) 를 할당 노드에 첨가한다. &lt;em&gt;AS-init&lt;/em&gt; 내에서는, &lt;em&gt;go.itab.*””.T.””&lt;/em&gt;.I 변수 값을 새로 만든 변수 &lt;em&gt;main.autotmp_0003&lt;/em&gt; 에 할당한다. 그런 다음, 변수가 &lt;em&gt;nil&lt;/em&gt; 인지를 검사한다. 만약에 &lt;em&gt;nil&lt;/em&gt; 이면, 컴파일러는 &lt;em&gt;runtime.typ2Itab&lt;/em&gt; 함수를 다음의 인수들을 사용해 호출한다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;main.T&lt;/em&gt; 타입의 포인터,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;main.I&lt;/em&gt; 인터페이스 타입의 포인터,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;go.itab.*””.T.””.I&lt;/em&gt; 변수를 가리키는 포인터.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;코드에서 보면, 이 변수가 &lt;em&gt;main.T&lt;/em&gt; 에서 &lt;em&gt;main.I&lt;/em&gt; 로 타입변환된 결과를 저장하는데 사용되고 있음이 명백하다.&lt;/p&gt;

&lt;h1 id=&#34;getitab-메서드의-내부&#34;&gt;&lt;em&gt;getitab&lt;/em&gt; 메서드의 내부&lt;/h1&gt;

&lt;p&gt;논리적인 다음 단계는 &lt;em&gt;runtime.typ2Itab&lt;/em&gt; 를 찾아보는 것이다. 아래에 이 함수를 나열해 놓았다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;func typ2Itab(t *_type, inter *interfacetype, cache **itab) *itab {
    tab := getitab(inter, t, false)
    atomicstorep(unsafe.Pointer(cache), unsafe.Pointer(tab))
    return tab
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;확실해 보이는 것은 실제 작업은 &lt;em&gt;getitab&lt;/em&gt; 메서드 내부에서 진행된다는 점인데, 두번째 줄에서 단순히 tab 변수를 cache 변수에 저장하는 점을 통해 알 수 있다. 그럼 &lt;em&gt;getitab&lt;/em&gt; 내부를 들여다 보자. 꽤 긴 내용이라 가장 들여다 볼 가치가 있는 부분만 복사했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;m =
    (*itab)(persistentalloc(unsafe.Sizeof(itab{})+uintptr(len(inter.mhdr)-1)*ptrSize, 0,
    &amp;amp;memstats.other_sys))
    m.inter = interm._type = typ

ni := len(inter.mhdr)
nt := len(x.mhdr)
j := 0
for k := 0; k &amp;lt; ni; k++ {
	i := &amp;amp;inter.mhdr[k]
	iname := i.name
	ipkgpath := i.pkgpath
	itype := i._type
	for ; j &amp;lt; nt; j++ {
		t := &amp;amp;x.mhdr[j]
		if t.mtyp == itype &amp;amp;&amp;amp; t.name == iname &amp;amp;&amp;amp; t.pkgpath == ipkgpath {
			if m != nil {
				*(*unsafe.Pointer)(add(unsafe.Pointer(&amp;amp;m.fun[0]), uintptr(k)*ptrSize)) = t.ifn
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선 결과를 저장할 메모리를 할당한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(*itab)(persistentalloc(unsafe.Sizeof(itab{})+uintptr(len(inter.mhdr)-1)*ptrSize, 0, &amp;amp;memstats.other_sys))
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go 언어에서 왜 메모리를 할당하는지 그리고 왜 이렇게 이상한 방식으로 하는지 궁금해 진다. 이 질문에 답하기 위해 &lt;em&gt;itab&lt;/em&gt; struct 정의를 들여다 보아야 할 필요가 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;type itab struct {
	inter  *interfacetype
	_type  *_type
	link   *itab
	bad    int32
	unused int32
	fun    [1]uintptr // variable sized
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;마지막 특성인 &lt;em&gt;fun&lt;/em&gt; 은 요소가 하나인 배열로 정의되어 있다. 하지만 실제로 배열의 크기는 변할 수 있다고 코멘트되어 있다. 나중에 보겠지만 이 특성은 특정한 타입내 정의된 메서드들을 가리키는 포인터 배열를 가지고 있다. 이 메서드들은 인터페이스 타입의 메서드에 상응한다. Go 언어의 저자들은 이 특성을 위해 동적 메로리 할당을 사용한다. (그렇다, unsafe 패키지를 사용하면 이런 일들이 가능하다.) 메모리를 얼마나 할당해야 하는지는 struct 자체의 크기에 인터페이스내 메서드의 숫자에 포인터 크기를 곱한 값을 더해 계산할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;unsafe.Sizeof(itab{})+uintptr(len(inter.mhdr)-1)*ptrSize
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음으로 두개의 중첩된 루프를 볼 수 있다. 첫째로 인터페이스의 모든 메서드를 차례로 처리한다. 인터페이스의 각 메서드에 대해서 특정한 타입내에 상응하는 메서드를 찾으려 한다. (메서드는 &lt;em&gt;mhdr&lt;/em&gt; 컬렉션에 저장되어 있다.) 두 메서드가 서로 같은지를 비교하는 과정은 굳이 설명할 필요가 없겠다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;if t.mtyp == itype &amp;amp;&amp;amp; t.name == iname &amp;amp;&amp;amp; t.pkgpath == ipkgpath
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 매치를 찾으면, 결과값의 &lt;em&gt;fun&lt;/em&gt; 에 메서드를 가리키는 포인터를 저장한다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;*(*unsafe.Pointer)(add(unsafe.Pointer(&amp;amp;m.fun[0]), uintptr(k)*ptrSize)) = t.ifn
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;성능에 대해 짧게 언급하면: 인터페이스와 사전에 설정된 타입 정의에 대해 메서드는 알파벳 순서로 정렬되어 있어서, 이 중첩 루프는 *O(n * m)* 대신 &lt;em&gt;O(n + m)&lt;/em&gt; 으로 반복한다. n 과 m 은 상응하는 메서드 숫자들&lt;/p&gt;

&lt;p&gt;마지막으로, 할당의 마지막 부분을 기억하는가?&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;AS l(16)
.   NAME-main.i l(16) main.I
.   EFACE l(16) main.I
.   .   NAME-main.autotmp_0003 l(16) PTR64-*uint8
.   .   NAME-main.autotmp_0000 l(16) PTR64-*main.T
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기에서 &lt;em&gt;EFACE&lt;/em&gt; 노드를 &lt;em&gt;main.i&lt;/em&gt; 변수에 할당한다. &lt;em&gt;EFACE&lt;/em&gt; 노드는 &lt;em&gt;main.autotmp_0003&lt;/em&gt; 와 &lt;em&gt;main.autotmp_0000&lt;/em&gt; 변수들에 대한 레퍼런스를 가지고 있는데 - &lt;em&gt;main.autotmp_0003&lt;/em&gt; 는 &lt;em&gt;runtime.typ2Itab&lt;/em&gt; 에 의해 반환된 itab struct를 가리키는 포인터이고, &lt;em&gt;main.autotmp_0000&lt;/em&gt; 변수는 &lt;em&gt;main.t&lt;/em&gt; 와 같은 값을 가지고 있다. 인터페이스 레퍼런스를 통해 메서드를 호출하는데 필요한 것은 이게 전부이다.&lt;/p&gt;

&lt;p&gt;그래서, &lt;em&gt;main.i&lt;/em&gt; 변수는 런타임 &lt;a href=&#34;https://godoc.org/runtime&#34;&gt;runtime&lt;/a&gt; 패키지내 정의된 &lt;a href=&#34;https://golang.org/src/runtime/iface.go&#34;&gt;iface&lt;/a&gt; struct의 인스턴스를 가지고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;type iface struct {
    tab  *itab
    data unsafe.Pointer
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;다음에-살펴볼-내용은&#34;&gt;다음에 살펴볼 내용은?&lt;/h1&gt;

&lt;p&gt;저자가 지금까지 Go 컴파일러와 런타임에 대해 아주 작은 부분만 설명했다는 점을 이해한다. 얘기해 볼만한 흥미로운 주제들이 여전히 많이 남아있다. 예를 들면, 오브젝트 파일, 링커, 재배치(relocations), 등에 대해서는 다음 블로그 포스트에서 살펴보기로 하겠다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;http://blog.altoros.com/golang-internals-part-2-diving-into-the-go-compiler.html&#34;&gt;Golang Internals, Part 2: Diving Into the Go Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;저자: Siarhei Matsiukevich&lt;/li&gt;
&lt;li&gt;번역자: Jhonghee Park&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang의 내부, 1부: 주요 컨셉트와 프로젝트 구조</title>
      <link>https://golangkorea.github.io/post/golang-internals/part1/</link>
      <pubDate>Tue, 13 Sep 2016 13:18:28 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/golang-internals/part1/</guid>
      <description>

&lt;p&gt;이 블로그 시리즈는 기본적인 Go 언어특성에 이미 익숙하며 좀 더 심도있게 내부구조를 알고자 하는 독자들을 위해 쓰여졌다. 이 포스트는 Go언어의 소스코드의 구조와 Go 컴파일러의 내부를 어느 정도 상세히 살펴보겠다. 이 글을 읽고 난 후, 독자는 다음과 같은 질문에 답을 얻을 것이다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go의 소스코드는 어떤 구조를 가지고 있는가?&lt;/li&gt;
&lt;li&gt;Go의 컴파일러는 어떻게 동작하는가?&lt;/li&gt;
&lt;li&gt;Go의 노드 트리(node treee)의 기본 구조는 무엇인가?&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;시작하며&#34;&gt;시작하며&lt;/h1&gt;

&lt;p&gt;새로운 프로그래밍 언어를 배우기 시작할 때, 보통은 &amp;ldquo;hello-world&amp;rdquo;와 같은 튜토리얼이나, 초보자 가이드, 그리고 언어의 주요한 컨셉트, 문법, 심지어 표준 라이브러리에 대한 상세한 정보들 많이 접하게 된다. 하지만, 언어가 런타임 도중에 할당하는 주요한 데이터 구조의 레이아웃이라던지, 내장 함수를 호출할 때 어떤 어셈블리 코드가 발생하는지와 같은 정보를 얻는 것은 쉽지 않다. 물론, 답은 소스코드내에 자리잡고 있지만, 저자의 경험에 비추어 보면, 이렇다 할 성과없이 수많은 시간을 허비하는 일도 가능하다.&lt;/p&gt;

&lt;p&gt;이런 주제에 대해 전문가인 척 하지도 않을 거고, 모든 가능한 측면을 설명하려는 시도 또한 하지 않겠다. 대신, 목표하는 바는 독자들 스스로 Go 소스코드를 어떻게 해독해 나갈 수 있는 지를 보여주는 것이다.&lt;/p&gt;

&lt;p&gt;시작하기 전에, 반드시 필요한 것은 각자의 Go 소스코드 복사본을 갖는 것이다. 소스코드를 다운 받는데 특별할 게 전혀 없다. 다음 명령을 실행해 보자.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/golang/go
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;메인 브랜치의 코드는 상시 변하는 점을 주목하자. 그래서 저자는 이 블로그에서 release-branch.go1.4 브랜치를 사용한다.&lt;/p&gt;

&lt;h1 id=&#34;프로젝트-구조-이해하기&#34;&gt;프로젝트 구조 이해하기&lt;/h1&gt;

&lt;p&gt;Go 레포의 &lt;code&gt;/src&lt;/code&gt; 폴더를 보게 되면, 많은 폴더를 발견하게 된다. 대부분은 Go의 표준 라이브러리 소스 파일을 갖고 있다. 여기에도 표준 이름짓기 관행이 항상 적용되는데, 각 패키지는 그 이름에 상응하는 이름의 폴더 아래 있다. 표준 라이브러리외에 다른 것들을 살펴보자. 저자의 견해로는, 아래 폴더들이 가장 중요하고 유용하다.&lt;/p&gt;

&lt;style type=&#34;text/css&#34;&gt;&lt;!--
.myTable { background-color:white;border-collapse:collapse; } .myTable th { background-color:#E0E0E0;color:black; } .myTable td, .myTable th { padding:5px;border:1px solid #989898; }
--&gt;&lt;/style&gt;

&lt;table class=&#34;myTable&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt;폴더&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;width: 530px;&#34; width=&#34;70%&#34;&gt;&lt;center&gt;설명&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;코멘드 라인 툴들을 보관한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd/go&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/go/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go 툴의 소스 파일이 있는데, 이 툴들은 Go 소스코드를 다운받거나, 빌드하고, 설치하는데 사용된다. 툴이 실행되면서 전체 소스를 수집하고, Go 링커와 컴파일러 코멘드 라인 툴들을 호출한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd/dist&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/dist/ &lt;/a&gt;&lt;/td&gt;
&lt;td&gt;다른 코멘트 라인 툴과 표준 라이브러리의 모든 패키지를 빌드하는 툴을 보관한다. 모든 특정한 툴이나 패키지에서 어떤 라이브러리가 사용되었는지를 알아 보려면 이 소스를 분석하고 싶을 것이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd/gc&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/gc/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go 컴파일러내 (프로세서) 아키텍쳐에 의존하지 않는 부분이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd/ld&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/ld/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go 링커내 (프로세서) 아키텍쳐에 의존하지 않는 부분이다. 아키텍쳐에 의존적인 부분들은 &#34;l&#34;로 끝나는 이름의 폴더에 위치하며 컴파일러와 같은 이름짓기 관행을 따른다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/cmd/5a&#34; target=&#34;golangsrc&#34;&gt;/src/cmd/5a/&lt;/a&gt;, 6a, 8a, and 9a&lt;/td&gt;
&lt;td&gt;여러 아키텍쳐에 맞춘 Go 어셈블러 컴파일러들을 발견할 수 있다. Go 어셈블러는 일종의 어셈블리 언어로 하층 기계어와는 딱 맞아 떨어지는 것은 아니다. 대신 각 아키텍쳐마다 독특한 컴파일러들이 있어 Go의 어셈블러를 기계의 어셈블러도 번역한다. 더 자세한 내용은 다음 링크를 참조하라. &lt;a href=&#34;https://golang.org/doc/asm&#34; target=&#34;golangsrc&#34;&gt;여기&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/lib9&#34; target=&#34;golangsrc&#34;&gt;/src/lib9/&lt;/a&gt;, &lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/libbio&#34; target=&#34;golangsrc&#34;&gt;/src/libbio&lt;/a&gt;, &lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/liblink&#34; target=&#34;golangsrc&#34;&gt;/src/liblink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;컴파일러, 링커, 그리고 런타임 패키지에 사용된 각종 라이브러리들.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/tree/release-branch.go1.4/src/runtime&#34; target=&#34;golangsrc&#34;&gt;/src/runtime/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;가장 중요한 Go 패키지로 모든 프로그램에 간접적으로 포함된다. 메모리 관리, 가비지 콜렉션, Go 루틴 생산등, 런타임 기능 전체를 포함하고 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;컴파일러-내부&#34;&gt;컴파일러 내부&lt;/h1&gt;

&lt;p&gt;위에서 언급한 것 처럼, 아키텍쳐에 무관한 Go 컴파일러는 &lt;code&gt;/src/cmd/gc&lt;/code&gt; 폴더에 위치 한다. 시작 점은 &lt;code&gt;lex.c&lt;/code&gt; 파일에 있다. 코멘드 라인 인수 파싱 같은 보편적인 기능들을 차치하고 들여다 보면, 컴파일러는 다음과 같은 일들을 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;어떤 공통의 데이터 구조를 초기화 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;주어진 모든 Go 파일을 차례로 읽어서 각 파일에 yyparse 메서드를 호출한다. 이때 실제로 파싱이 작동한다. Go 컴파일러는 &lt;code&gt;Bison&lt;/code&gt;을 파서 발생기(parser generator)로 사용한다. 언어의 문법은 &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.y&#34;&gt;go.y&lt;/a&gt;에 완전히 서술되어 있다. (자세한 내용은 나중에 더 제공될 예정이다) 결과로, 이 단계는 완전한 파스트리(parse tree)를 생성하는데, 이때 트리의 각 노드는 컴파일된 프로그램의 요소들을 대표한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;생성된 트리를 재귀적으로(Recursively) 방문하면서 약간의 수정을 가한다, 예를 들어, 암시적으로 타입이 주어진 노드에 타입 정보를 정의하거나, 타입 케스팅과 같은 언어요소들을 런타임 패키지내 어떤 함수을 호출하는 식으로 다시 재구성하기도 한다 그외 다른 일들도 실행한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;파스트리(parse tree)가 완성되고 난 뒤 실제 컴파일을 실행한다. 노드들은 어셈블리 코드로 번역된다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;생성된 어셈블리 코드에 심볼 테이블과 같은 부수적인 데이터 구조를 함께 오브젝트 파일 (object file)에 담아 만들고 디스크에 저장한다.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;go-문법-들여다-보기&#34;&gt;Go 문법 들여다 보기&lt;/h1&gt;

&lt;p&gt;이제 두번째 단계를 좀 더 가까이 살펴보자. &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.y&#34;&gt;go.y&lt;/a&gt; 파일은 언어 문법(grammar)을 가지고 있어 Go 컴파일러를 조사하고 언어의 구문론(syntax)을 이해하는 데 좋은 출발점이다. 파일의 주요한 부분은 선언문들로 구성되며, 다음과 유사하다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;xfndcl:
     LFUNC fndcl fnbody

fndcl:
     sym &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; fnres
| &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; sym &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; fnres
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 선언에서는, &lt;em&gt;xfndcl&lt;/em&gt; 와 &lt;em&gt;fundcl&lt;/em&gt; 노드가 정의된다. &lt;em&gt;fundcl&lt;/em&gt; 노드는 두가지 형식중에 하나이다. 첫번째는 다음의 언어 구성소(construct)에 상응하는 형식이다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;somefunction(x int, y int) int
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 두번째는 다음의 언어 구성소에 상응한다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;(t *SomeType) somefunction(x int, y int) int.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;xfndcl&lt;/em&gt; 노드는 상수인 &lt;em&gt;LFUNC&lt;/em&gt; 에 저장된 키워드 &lt;em&gt;func&lt;/em&gt; 를 뒤 따르는 &lt;em&gt;fndcl&lt;/em&gt; 와 &lt;em&gt;fnbodynodes&lt;/em&gt; 로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;Bison(혹은 Yacc) 문법의 중요한 기능중에 하나는 무작위의 C 코드를 각 노드 정의옆에 갖다 붙일 수 있다는 것이다. 소스 코드안에 이런 노드의 정의가 매치될 때 마다 C 코드는 실행된다. 여기서, (실행된)결과의 노드는 $$ 사용해 표시하고 $1, $2 등등으로 자식 노드를 나타낸다.&lt;/p&gt;

&lt;p&gt;예제를 통해 보면 다 쉽게 이해할 수 있다. 다음은 실제코드를 간소한 예다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;fndcl:
      sym &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; fnres
        {
          t = nod(OTFUNC, N, N);
          t-&amp;gt;list = $3;
          t-&amp;gt;rlist = $5;

          $$ = nod(ODCLFUNC, N, N);
          $$-&amp;gt;nname = newname($1);
          $$-&amp;gt;nname-&amp;gt;ntype = t;
          declare($$-&amp;gt;nname, PFUNC);
      }
| &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; sym &#39;(&#39; oarg_type_list_ocomma &#39;)&#39; fnres
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선, 새로운 노드가 만들어 지고 함수 선언을 위한 타입 정보를 갖는다. $3는 인수 리스트로 $5는 결과 리스트로 이 노드에서 레퍼런스된다. 그런 다음, $$ 결과 노드가 만들어 져서, 함수 이름과, 타입 노드를 저장한다. 보다시피 &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.y&#34;&gt;go.y&lt;/a&gt;내 정의된 것들과 노드 구조사이에 직접적인 연결이 있을 수 없다.&lt;/p&gt;

&lt;h1 id=&#34;노드-이해하기&#34;&gt;노드 이해하기&lt;/h1&gt;

&lt;p&gt;이제 노드가 실제로 무엇인지 알아 볼 시간이다. 첫번째로, 노드는 struct이고, &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.h#L245&#34;&gt;여기&lt;/a&gt;에 정의되어 있다. 이 struct는 굉장히 많은 특성들을 갖고 있는데 그 이유는 다른 종류의 노드를 지원해야 하고 노드종류마다 다른 속성들을 가지고 있기 때문이다.&lt;/p&gt;

&lt;table class=&#34;myTable&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt;노드 struct 필드&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;width: 530px;&#34; width=&#34;70%&#34;&gt;&lt;center&gt;설명&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.h#L259&#34; target=&#34;golangsrc&#34;&gt;op&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;이 필드는 각 노드마다 존재하며 노드의 연산이 무엇이지를 나타낸다. 이 필드를 통해 노드의 종류를 분간할 수 있다. 이전 예제에서 본 &lt;em&gt;OTFUNC&lt;/em&gt; (연산 타입 함수) 과 &lt;em&gt;ODCLFUNC&lt;/em&gt; (연산 선언 함수)같은 것 들이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.h#L295&#34; target=&#34;golangsrc&#34;&gt;type&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;노드가 타입정보를 보유할 때 (때로 타입이 없는 노드도 있다. 예를 들면, &lt;em&gt;if&lt;/em&gt;, &lt;em&gt;switch&lt;/em&gt;, 혹은 &lt;em&gt;for&lt;/em&gt;와 같은 제어 흐름문들), 이 필드는 타입정보를 가지고 있는 또 다른 struct를 가리키는 레퍼런스이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.4/src/cmd/gc/go.h#L309&#34; target=&#34;golangsrc&#34;&gt;val&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;이 필드는 리터럴 노드의 실제 값을 갖는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;독자는 이제 노드 트리의 기본적 구조를 이해했으므로, 그 지식을 실전에 투여할 수 있다. 다음 포스트에서는, Go 컴파일러가 과연 무엇을 생산하는지를 간단한 Go 애플리케이션을 통해 살펴보겠다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;http://blog.altoros.com/golang-part-1-main-concepts-and-project-structure.html&#34;&gt;Golang Internals, Part 1: Main Concepts and Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;저자: Siarhei Matsiukevich&lt;/li&gt;
&lt;li&gt;번역자: Jhonghee Park&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang의 내부, 0부: 부록</title>
      <link>https://golangkorea.github.io/post/golang-internals/resources/</link>
      <pubDate>Mon, 12 Sep 2016 13:18:28 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/golang-internals/resources/</guid>
      <description>

&lt;h1 id=&#34;go-언어의-최신-컴파일러에-대한-내용&#34;&gt;Go 언어의 최신 컴파일러에 대한 내용&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;GopherCon 2016: Rob Pike - The Design of the Go Assembler

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KINIAgRpkDA&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2016/asm.slide&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GopherCon 2014 Go from C to Go by Russ Cox

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QIE5nV5fDwA&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2014/c2go.slide&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GopherFest 2015: Rob Pike on the move from C to Go in the toolchain

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cF1zJYkBW4A&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2015/gogo.slide&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;go의-어셈블러&#34;&gt;Go의 어셈블러&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/asm&#34;&gt;A Quick Guide to Go&amp;rsquo;s Assembler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>