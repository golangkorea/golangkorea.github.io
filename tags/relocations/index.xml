<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Relocations on Golang Korean Community</title>
    <link>https://golangkorea.github.io/tags/relocations/</link>
    <description>Recent content in Relocations on Golang Korean Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Sep 2016 16:20:29 -0400</lastBuildDate>
    <atom:link href="https://golangkorea.github.io/tags/relocations/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang의 내부, 4부: 오브젝트 파일, 그리고 함수 메타데이터</title>
      <link>https://golangkorea.github.io/post/golang-internals/part4/</link>
      <pubDate>Sun, 18 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/golang-internals/part4/</guid>
      <description>

&lt;p&gt;오늘은, Func 구조에 대해 좀 더 자세히 들여다 보고 어떻게 가비지 컬렉션이 작동하는지 몇가지 자세한 내용을 논하겠다.&lt;/p&gt;

&lt;p&gt;이 포스트는 &lt;a href=&#34;https://golangkorea.github.io/post/golang-internals/part3/&#34;&gt;Golang의 내부, 3부: 링커, 오브젝트 파일, 그리고 재배치&lt;/a&gt;의 연속이어서, 독자가 아직 읽지 않았다면 이 포스트를 소화하기 전에 읽기를 적극 권장한다.&lt;/p&gt;

&lt;h1 id=&#34;함수-메타데이터의-구조&#34;&gt;함수 메타데이터의 구조&lt;/h1&gt;

&lt;p&gt;재배치에 대한 주요한 아이디어는 3부를 통해 분명해 졌을 것이다. 이제 main 메서드의 Func 구조를 살펴보자:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;01 Func: &amp;amp;goobj.Func{
02     Args:    0,
03     Frame:   8,
04     Leaf:    false,
05     NoSplit: false,
06     Var:     {
07     },
08     PCSP:   goobj.Data{Offset:255, Size:7},
09     PCFile: goobj.Data{Offset:263, Size:3},
10     PCLine: goobj.Data{Offset:267, Size:7},
11     PCData: {
12         {Offset:276, Size:5},
13     },
14     FuncData: {
15         {
16             Sym:    goobj.SymID{Name:&amp;quot;gclocals·3280bececceccd33cb74587feedb1f9f&amp;quot;, Version:0},
17          Offset: 0,
18     },
19     {
20          Sym:    goobj.SymID{Name:&amp;quot;gclocals·3280bececceccd33cb74587feedb1f9f&amp;quot;, Version:0},
21                Offset: 0,
22            },
23        },
24        File: {&amp;quot;/home/adminone/temp/test.go&amp;quot;},
25    },
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 구조체는 Go언어의 런타임이 사용하는, 컴파일러가 오브젝트 파일에 방출한 함수 메타데이터로 생각해 볼 수 있다. &lt;a href=&#34;https://docs.google.com/document/d/1lyPIbmsYbXnpNj57a261hgOYVpNRcgydurVQIyZOz_o/pub&#34;&gt;이 문서&lt;/a&gt;를 통해 Func내 정확한 포맷과 여러 필드들의 의미에 대한 설명을 접할 수 있다. 이제, 런타임에서 이 메타데이터가 어떻게 사용되는지 보겠다.&lt;/p&gt;

&lt;p&gt;runtime 패키지 안에서 이 메타데이터는 다음 구조체에 매핑되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;01 type _func struct {
02     entry   uintptr // start pc
03     nameoff int32   // function name
04
05     args  int32 // in/out args size
06     frame int32 // legacy frame size; use pcsp if possible
07
08     pcsp      int32
09     pcfile    int32
10     pcln      int32
11     npcdata   int32
12     nfuncdata int32
13 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;오브젝트 파일 안에 있는 정보가 모두 다 직접적으로 매핑되어 있는 것은 아니다. 몇몇 필드들은 링커에만 사용된다. 그렇다 해도 여기에서 가장 흥미로운 필드들은 &lt;em&gt;pcsp&lt;/em&gt;, &lt;em&gt;pcfile&lt;/em&gt;, 그리고 &lt;em&gt;pcln&lt;/em&gt; 이다. 이 필드들은 &lt;a href=&#34;http://en.wikipedia.org/wiki/Program_counter&#34;&gt;프로그램 카운터&lt;/a&gt;가 stack pointer, filename, 그리고 line으로 번역될 때 사용된다.&lt;/p&gt;

&lt;p&gt;예를 들면, &lt;em&gt;panic&lt;/em&gt; 이 발생할 경우 이 메타데이터 필드들이 필요할 것이다. 그 순간에 런타임이 알고 있는 바는 오직 &lt;em&gt;panic&lt;/em&gt; 을 야기한 현재의 어셈블리 명령의 프로그램 카운터이다. 그래서 런타임은 그 카운터를 이용해 현재 파일과 라인 번호, 그리고 stack trace 전부를 얻는 것이다. 파일과 라인 번호는 &lt;em&gt;pcfile&lt;/em&gt; 과 &lt;em&gt;pcln&lt;/em&gt; 필드를 이용하면 바로 해결된다. stack trace는 &lt;em&gt;pcsp&lt;/em&gt; 를 이용하여 재귀적으로 해결한다.&lt;/p&gt;

&lt;p&gt;이제 프로그램 카운터를 가지고 어떻게 상응하는 라인 번호를 얻을 수 있는지에 대한 질문에 답을 하자. 답을 얻기 위해서는 어셈블리 코드를 들여다 보고 오브젝트 파일에 라인 번호가 어떻게 저장되어 있는 지를 이해해야 한다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1 0x001a 00026 (test.go:4)    MOVQ    $1,(SP)
2     0x0022 00034 (test.go:4)    PCDATA  $0,$0
3     0x0022 00034 (test.go:4)    CALL    ,runtime.printint(SB)
4     0x0027 00039 (test.go:5)    ADDQ    $8,SP
5     0x002b 00043 (test.go:5)    RET ,
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로그램 카운터 26에서 38까지는 라인 번호 4에 상응하고 카운터 39에서 &lt;em&gt;next_function_program_counter - 1&lt;/em&gt; 까지는 라인 번호 5에 해당된다. 효율적 공간사용을 생각하면 다음과 같은 맵을 저장하는 것으로 충분하다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1 26 - 4
2 39 - 5
3 …
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이것은 컴파일러가 하는 일과 거의 일치한다. &lt;em&gt;pcln&lt;/em&gt; 필드는 현재 실행중인 함수의 첫번째 프로그램 카운터에 상응하는 특정한 오프셋을 맵안에서 가리키고 있다. 이 오프셋과 또 다음 함수의 첫번째 프로그램 카운터의 오프셋을 알고, 런타임은 바이너리 검색을 이용해 주어진 프로그램 카운터에 상응하는 라인 번호를 찾는다.&lt;/p&gt;

&lt;p&gt;Go 언어에서 이런 아이디어는 일반화 되어 있다. 라인 번호와 스택 포인터만 프로그램 카운터에 맵팅되어 있는게 아니라 어떤 정수 값도 매핑될 수 있다. &lt;em&gt;PCDATA&lt;/em&gt; 명령을 통해서 가능한 것이다. 매번 링커는 다음 명령을 찾는다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1 0x0022 00034 (test.go:4)    PCDATA  $0,$0
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령은 실제로 어셈블러 명령을 생산하지 않는다. 대신, 이 명령의 두번째 인수를 맵안에서 현재의 프로그램 카운터를 사용해 저장하고, 첫번째 인수는 어떤 맵이 사용되는 지를 나타낸다. 이 첫번째 인수를 통해, 새로운 맵을 쉽게 첨가할 수 있는데, 컴파일러와 런타임에는 그 의미가 알려지지만 링커에게는 보이지 않는다.&lt;/p&gt;

&lt;h1 id=&#34;가비지-컬렉터는-어떻게-함수-메타데이터를-사용하는가&#34;&gt;가비지 컬렉터는 어떻게 함수 메타데이터를 사용하는가&lt;/h1&gt;

&lt;p&gt;마지막으로 아직 설명을 더 명확하게 해야할 함수 메타데이터의 내용은 FuncData 배열인데, 가비지 컬렉션에 필요한 정보를 담고 있다. Go 언어는 &lt;a href=&#34;http://www.brpreiss.com/books/opus5/html/page424.html&#34;&gt;mark-and-sweep&lt;/a&gt; 가비지 컬렉터 (GC)를 사용하는데 두 단계를 거쳐 동작한다. 첫번째 단계인 (mark)에서는, 모든 객체를 섭렵하면서 아직 사용중인 것들은 &amp;ldquo;reachable&amp;rdquo;로 표시한다. 표시되지 않은 모든 객체는 두번째 단계인 (sweep)에서 제거된다.&lt;/p&gt;

&lt;p&gt;그래서, 가비지 컬렉터는 전역 변수, 프로세서 레지스터, 스택 프레임, 그리고 이미 위치가 알려진 객체내 포인터들과 같이 잘 알려진 위치들내 도달할 수 있는(reachable) 객체를 찾아보면서 시작한다. 하지만 곰곰히 생각해 보면, 스택 프레임안에서 포인터를 찾아내는 것이 그렇게 쉽지는 않는 일이다. 그렇다면 런타임이 가비지 컬렉션을 실행할때 스택안에서 어떻게 포인터와 포인터가 아닌 타입의 변수들을 알아 내는 것일까? 바로 여기에서 &lt;em&gt;FuncData&lt;/em&gt; 가 등장하는 것이다.&lt;/p&gt;

&lt;p&gt;각 함수마다 컴파일러는 두개의 변수를 만든다. 하나는 스택 프레임의 인수들을 위한 비트맵 벡터를 담고 있다. 다른 하나는 나머지 프레임을 위한 비트맵으로 함수에 정의된 포인터 타입의 모든 지역 변수들을 포함한다. 이 변수들은 각자 가비지 컬렉터에게 스택 프레임안에 포인터들이 어디에 위치하는지 정확하게 알려주고 이는 가비지 컬렉터가 일을 하는 데 충분한 정보이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PCDATA&lt;/em&gt; 와 같이 &lt;em&gt;FUNCDATA&lt;/em&gt; 역시 의사-Go 어셈블리 명령(pseudo-Go assembly instruction)에 의해 발생된 것임을 언급할 가치가 있겠다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1 0x001a 00026 (test.go:3)    FUNCDATA    $0,gclocals·3280bececceccd33cb74587feedb1f9f+0(SB)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령의 첫번째 인수는 이것이 인수들을 위한 함수 데이터인지 아니면 지역 변수 공간인지를 나타낸다. 두번째 인수는 실제로 GC 마스크를 담고 있는 숨겨진 변수에 대한 참조 값이다.&lt;/p&gt;

&lt;h1 id=&#34;golang에-대해-더-알아보기&#34;&gt;Golang에 대해 더 알아보기&lt;/h1&gt;

&lt;p&gt;앞으로 나올 포스트에서는 Go 언어의 부트 스트랩 과정을 얘기하겠다. 런타임이 어떻게 작동하는지를 이해하는데 중요한 단서이다. 일주일 뒤에 보자.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;http://blog.altoros.com/golang-part-4-object-files-and-function-metadata.html&#34;&gt;Golang Internals, Part 4: Object Files and Function Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;저자: Siarhei Matsiukevich&lt;/li&gt;
&lt;li&gt;번역자: Jhonghee Park&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang의 내부, 3부: 링커, 오브젝트 파일, 그리고 재배치</title>
      <link>https://golangkorea.github.io/post/golang-internals/part3/</link>
      <pubDate>Sat, 17 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://golangkorea.github.io/post/golang-internals/part3/</guid>
      <description>

&lt;p&gt;오늘은 Go 링커와 오브젝트 파일, 그리고 재배치(relocations)에 대해 얘기해 보자.&lt;/p&gt;

&lt;p&gt;이런 것들이 독자들과 무슨 상관이 있을까? 만약 독자가 어떤 대형 프로젝트의 내부에 대해 배우고자 한다면, 첫번째 할 일이 그 것을 콤포넌트나 모듈로 자를 필요가 있다. 둘째로 이 모듈들이 서로에게 어떤 인터페이스를 제공하는지 이해할 필요가 있다. Go 언어 프로젝트의 경우, 이런 상위 모듈들이 컴파일러, 링커, 그리고 런타임이다. 컴파일러가 제공하고 링커가 사용하는 것이 오프젝트 파일인데, 오늘은 그 것으로 조사를 시작해 보자.&lt;/p&gt;

&lt;h1 id=&#34;go-오브젝트-파일-생성하기&#34;&gt;Go 오브젝트 파일 생성하기&lt;/h1&gt;

&lt;p&gt;실용적인 실험을 하나 해 보자-아주 간단한 프로그램을 하나 만들고, 컴파일하고, 어떤 오브젝트 파일이 만들어 지는지 관찰하자. 저자의 경우, 프로그램은 다음과 같다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;1: package main
2:
3: func main() {
4:  print(1)
5: }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;너무 쉽지 않은가? 이제 컴파일을 한다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;go tool 6g test.go
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령은 &lt;em&gt;test.6&lt;/em&gt; 오브젝트 파일을 생산한다. 이 파일의 내부 구조를 조사하기 위해, &lt;a href=&#34;https://github.com/golang/go/tree/master/src/cmd/internal/goobj&#34;&gt;goobj&lt;/a&gt; 라이브러리를 사용하겠다. 이 라이브러리는 내부적으로 Go 소스 코드에 채택되어 주로 유닛 테스트를 구현하는데 쓰인다. 이 유닛 테스트는 여러 상황에서 오브젝트 파일이 정확히 생성되었는지를 테스트한다. 이 블로그 포스트를 위해 &lt;em&gt;goobj&lt;/em&gt; 라이브러리를 통해 생성된 출력을 콘솔로 프린트하는 매우 간단한 프로그램을 만들었다. 이 프로그램의 소스코드는 &lt;a href=&#34;https://github.com/s-matyukevich/goobj_explorer&#34;&gt;여기&lt;/a&gt;에서 살펴볼 수 있다.&lt;/p&gt;

&lt;p&gt;무엇보다도 우선, 저자의 프로그램을 다운받아 설치해야 한다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/s-matyukevich/goobj_explorer
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런 후에 다음의 명령을 실행하라:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;goobj_explorer -o test.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 &lt;em&gt;goob.Package&lt;/em&gt; 구조를 콘솔안에서 살펴 볼 수 있을 것이다.&lt;/p&gt;

&lt;h1 id=&#34;오브젝트-파일-조사하기&#34;&gt;오브젝트 파일 조사하기&lt;/h1&gt;

&lt;p&gt;이 오브젝트 파일에서 가장 흥미로운 부분은 &lt;em&gt;Syms&lt;/em&gt; 배열이다. 이것은 실제로 심볼 테이블이다. 프로그램안에 정의된 모든 것들, 함수, 전역 변수, 타입, 상수, 등이 이 테이블에 적혀있다. &lt;em&gt;main&lt;/em&gt; 함수에 상응하는 엔트리에 대해 살펴보자. (Roloc 과 Func 필드는 출력에서 생략되었음을 주목하라. 이 필드들은 나중에 논하겠다.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;amp;goobj.Sym{
            SymID: goobj.SymID{Name:&amp;quot;main.main&amp;quot;, Version:0},
            Kind:  1,
            DupOK: false,
            Size:  48,
            Type:  goobj.SymID{},
            Data:  goobj.Data{Offset:137, Size:44},
            Reloc: ...,
            Func:  ...,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;goobj.Sum&lt;/em&gt; 구조내 필드의 이름들은 따로 설명이 필요 없다:&lt;/p&gt;

&lt;style type=&#34;text/css&#34;&gt;&lt;!--
.myTable { background-color:white;border-collapse:collapse; } .myTable th { background-color:#E0E0E0;color:black; } .myTable td, .myTable th { padding:5px;border:1px solid #989898; }
--&gt;&lt;/style&gt;

&lt;table class=&#34;myTable&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt;필드&lt;/center&gt;&lt;/th&gt;
&lt;th style=&#34;width: 530px;&#34; width=&#34;70%&#34;&gt;&lt;center&gt;설명&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SumID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;독특한 심볼 아이디로 심볼의 이름과 버전으로 구성된다. 버전을 통해 동일한 이름에 차이를 부여한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Kind&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;어떤 종류의 심볼에 속하는지를 나타낸다 (상세한 내용은 나중에).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DupOK&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;이 필드는 중복된 이름(같은 이름의 심볼들)이 허락되는지를 나타낸다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;심볼 데이터의 크기.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;만약 있는 경우, 심볼 타입을 대표하는 또 다른 심볼에 대한 레퍼런스.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Data&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;바이너리 데이터를 가진다. 다른 종류의 심볼에 따라 다른 의미를 갖고 있다. 예를 들어, 함수에는 어셈블리 코드를, 문자열 심볼에는 원자재 문자열 콘텐트, 기타 등등.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Reloc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;재배치 리스트 (더 상세한 내용은 나중에 제공될 것이다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Func&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;함수 심볼에 대한 특별한 함수 메타 데이터를 갖고 있다. (자세한 내용은 아래를 보라).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이제, 다른 종류의 심볼들을 살펴보자. 모든 사용 가능한 종류의 심볼들이 상수로서 &lt;em&gt;goobj&lt;/em&gt; 패키지 (&lt;a href=&#34;https://github.com/golang/go/blob/master/src/cmd/internal/goobj/read.go#L30&#34;&gt;여기&lt;/a&gt;)에서 찾아 볼수 있)안에 정의되어 있다. 아래에, 이러한 상수들의 첫번째 부분을 복사해 놓았다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;const (
	_ SymKind = iota

	// readonly, executable
	STEXT
	SELFRXSECT

	// readonly, non-executable
	STYPE
	SSTRING
	SGOSTRING
	SGOFUNC
	SRODATA
	SFUNCTAB
	STYPELINK
	SSYMTAB // TODO: move to unmapped section
	SPCLNTAB
	SELFROSECT
	...
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;보다시피, main.main 심볼은 종류 1에 속하고 &lt;em&gt;STEXT&lt;/em&gt; 상수에 상응한다. &lt;em&gt;STEXT&lt;/em&gt; 는 실행 가능한 코드를 갖는 심볼이다. 이제, &lt;em&gt;Reloc&lt;/em&gt; 배열을 살펴보자. 다음과 같은 struct들로 구성되어 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Reloc struct {
    Offset int
    Size   int
    Sym    SymID
    Add    int
    Type int
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 재배치는 &lt;em&gt;[Offset, Offset+Size]&lt;/em&gt; 간격에 위치한 바이트들이 특정 주소로 교체되어야 함을 암시한다. 이 주소는 &lt;em&gt;Sym&lt;/em&gt; 심볼의 위치에 &lt;em&gt;Add&lt;/em&gt; 바이트 숫자를 더하여 계산된다.&lt;/p&gt;

&lt;h1 id=&#34;재배치-이해하기&#34;&gt;재배치 이해하기&lt;/h1&gt;

&lt;p&gt;이제 예를 통해 재배치가 어떻게 작동하는지를 알아보자. 그러기 위해서, &lt;em&gt;-S&lt;/em&gt; 스위치를 이용해 프로그램을 컴파일 할 필요가 있다. &lt;em&gt;-s&lt;/em&gt; 스위치는 생성된 어셈블리 코드를 출력할 것이다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;go tool 6g -S test.go
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;어셈블러를 들여다 보면서 main 함수를 찾아보자.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;.main t=1 size=48 value=0 args=0x0 locals=0x8
    0x0000 00000 (test.go:3)    TEXT    &amp;quot;&amp;quot;.main+0(SB),$8-0
    0x0000 00000 (test.go:3)    MOVQ    (TLS),CX
    0x0009 00009 (test.go:3)    CMPQ    SP,16(CX)
    0x000d 00013 (test.go:3)    JHI ,22
    0x000f 00015 (test.go:3)    CALL    ,runtime.morestack_noctxt(SB)
    0x0014 00020 (test.go:3)    JMP ,0
    0x0016 00022 (test.go:3)    SUBQ    $8,SP
    0x001a 00026 (test.go:3)    FUNCDATA    $0,gclocals·3280bececceccd33cb74587feedb1f9f+0(SB)
    0x001a 00026 (test.go:3)    FUNCDATA    $1,gclocals·3280bececceccd33cb74587feedb1f9f+0(SB)
    0x001a 00026 (test.go:4)    MOVQ    $1,(SP)
    0x0022 00034 (test.go:4)    PCDATA  $0,$0
    0x0022 00034 (test.go:4)    CALL    ,runtime.printint(SB)
    0x0027 00039 (test.go:5)    ADDQ    $8,SP
    0x002b 00043 (test.go:5)    RET ,
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;나중에 올 블로그 포스트에서 이 코드에 대해 더 자세히 살펴보며 Go의 런타임이 어떻게 작동하는지를 이해하기 위한 시도들 할 것이다. 지금은 다음 한줄에 관심이 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;0x0022 00034 (test.go:4)	CALL	,runtime.printint(SB)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 명령은 함수 데이터내 (16진수로는) 0x0022의 오프셋 이나 (10진수로는) 00034 오프셋에 위치한다. 이 줄은 실제로 &lt;em&gt;runtime.printint&lt;/em&gt; 함수를 호출하는 책임을 진다. 문제는 컴파일러가 컴파일이 진행되는 동안 &lt;em&gt;runtime.printint&lt;/em&gt; 함수의 정확한 주소를 모른다는 것이다. 이 함수는 컴파일러가 전혀 모르는 다른 오브젝트 파일내에 위치한다. 그런 경우, 컴파일러는 재배치를 사용한다. 아래는 이 메서드 호출에 상응하는 정확한 재배치이다. (저자가 &lt;em&gt;goobj_explorer&lt;/em&gt; 유틸리티의 첫번째 출력에서 복사해 왔다.):&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;{
    Offset: 35,
    Size:   4,
    Sym:    goobj.SymID{Name:&amp;quot;runtime.printint&amp;quot;, Version:0},
    Add:    0,
    Type:   3,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 재배치는 링커에게 35 바이트의 오프셋에서 시작하면서, 4 바이트의 데이터를 &lt;em&gt;runtime.printint&lt;/em&gt; 심볼의 시작점 주소로 교체할 필요가 있다고 말한다. 하지만 메인 함수 데이터로 부터 35 바이트의 오프셋는 실제로 이전에 본적이 있는 호출 명령(call instruction)의 인수이다. (이 (호출) 명령은 34 바이트의 오프셋에서 시작한다. 1 바이트는 호출 명령 코드이고 4 바이트는 이 명령의 주소를 가리킨다.)&lt;/p&gt;

&lt;h1 id=&#34;링커는-어떻게-작동하는가&#34;&gt;링커는 어떻게 작동하는가&lt;/h1&gt;

&lt;p&gt;이제 위의 설명을 이해한다면, 링커가 어떻게 작동하는 지를 알아낼 수 있다. 다음의 개요는 매우 단순화 시킨 것이긴 하지만 주요한 아이디어를 반영한다:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;링커는 메인 패키지로 부터 참조된 모든 패키지의 심볼을 모아서 하나의 긴 바이트 배열(혹은 바이너리 이미지)에 실는다.&lt;/li&gt;
&lt;li&gt;각 심볼에 대해서는, 링커가 이러한 이미지내의 주소를 계산한다.&lt;/li&gt;
&lt;li&gt;그런다음, 모든 심볼에 대해 정의된 재배치를 적용한다. 링커가 그런 재배치에서 참조된 모든 다른 심볼들의 정확한 주소들들 알고 있기 때문에 매우 쉬운 일이다.&lt;/li&gt;
&lt;li&gt;링커는 (리눅스의) Executable and Linkable (ELF) 포맷이나 (윈도우의) Portable Executable (PE) 포맷에 필요한 모든 헤더를 준비한다. 그런 다음, 그 결과물로 링커는 실행파일을 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;tls-이해하기&#34;&gt;TLS 이해하기&lt;/h1&gt;

&lt;p&gt;조심성 있는 독자는 main 메서드에 대해 &lt;em&gt;goobj_explorer&lt;/em&gt; 유틸리티 출력속에 이상한 재배치가 있음을 알아챌 것이다. 어떤 메서드 호출에도 상응하지 않고 심지어 빈 심볼을 가리키고 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;{
    Offset: 5,
    Size:   4,
    Sym:    goobj.SymID{},
    Add:    0,
    Type:   9,
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;과연, 이 재배치가 하는 것이 무엇일까? 5 바이트의 오프셋을 가지고 있고 크기가 4 바이트임을 알 수 있다. 이 오프셋에는 다음 명령이 있다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;0x0000 00000 (test.go:3)    MOVQ    (TLS),CX
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;0 오프셋에서 시작하고 9 바이트을 차지한다 (다음 명령이 9 바이트 오프셋애서 시작하는 걸로 알 수 있다). 추측컨대, 이 재배치는 낯선 &lt;em&gt;(TLS)&lt;/em&gt; 구문을 어떤 주소로 교체한다. 그러면 TLS는 무엇이며, 무슨 주소를 사용하는가?&lt;/p&gt;

&lt;p&gt;TLS는 쓰레드 지역 저장 공간(Thread Local Storage)의 축약형이다. 이 기술은 많은 프로그래밍 언어에 사용되었는데 상세한 내용은 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thread-local_storage&#34;&gt;여기&lt;/a&gt;를 참조하라. 간단하게 설명하면, 다른 쓰레드에 의해 사용될 때, 다른 메모리 장소를 가리키는 변수의 사용을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;Go 언어에서 TLS는 &lt;em&gt;G 구조체&lt;/em&gt; 를 가리키는 포인터를 저장하는 데 사용된다. &lt;em&gt;G 구조체&lt;/em&gt; 는 특정한 Go 루틴 내부의 상세한 내용을 담고 있는데 나중에 올 블로그 포스트에서 더 자세히 다룰 것이다. 그러므로, 다른 Go 루틴들이 어떤 한 Go 루틴을 접근할 때, 이 Go 루틴 내부의 자세한 정보를 담고 있는 구조체를 가리키는 변수가 항상 존재한다는 얘기다. 이 변수의 위치는 링커에게 알려져 있어서 (우리가) 분석중인 명령안에서 이 변수가 CX 레지스터에 이동된다는 것을 알 수 있다. TLS는 아키텍쳐마다 다르게 구현될 수 있다. AMD64에서는, &lt;em&gt;FS&lt;/em&gt; 레지스터를 통해 구현되어서, 이 명령은 &lt;em&gt;MOVQ FS, CX&lt;/em&gt; 로 번역될 수 있다.&lt;/p&gt;

&lt;p&gt;재배치에 대한 토론을 마감하기 위해, 모든 재배치 타입을 담고 있는 열거형 타입(enum) 을 소개하겠다:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;// Reloc.type
enum
{
	R_ADDR = 1,
	R_SIZE,
	R_CALL, // relocation for direct PC-relative call
	R_CALLARM, // relocation for ARM direct call
	R_CALLIND, // marker for indirect call (no actual relocating necessary)
	R_CONST,
	R_PCREL,
	R_TLS,
	R_TLS_LE, // TLS local exec offset from TLS segment register
	R_TLS_IE, // TLS initial exec offset from TLS base pointer
	R_GOTOFF,
	R_PLT0,
	R_PLT1,
	R_PLT2,
	R_USEFIELD,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 enum에서 볼 수 있듯이, 재배치 타입 3는 R_CALL 이고 재배치 타입 9은 R_TLS이다. 이 enum 이름들은 방금 설명한 행동들을 완벽하게 설명한다.&lt;/p&gt;

&lt;h1 id=&#34;go-오브젝트-파일에-대한-부연-설명&#34;&gt;Go 오브젝트 파일에 대한 부연 설명&lt;/h1&gt;

&lt;p&gt;다음 포스트에서 오브젝트 파일에 대한 설명을 계속해 나가겠다. 또한 Go 런타임이 어떻게 작동하는 지를 이해하는데 필요한 정보들을 더 제공하겠다. 질문이 있다면 코멘트란에 부담없이 해 주길 바란다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;원문: &lt;a href=&#34;http://blog.altoros.com/golang-internals-part-3-the-linker-and-object-files.html&#34;&gt;Golang Internals, Part 3: The Linker, Object Files, and Relocations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;저자: Siarhei Matsiukevich&lt;/li&gt;
&lt;li&gt;번역자: Jhonghee Park&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>