<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sangbae Yun on Golang Korean Community</title>
    <link>https://golangkorea.github.io/authors/sangbae-yun/</link>
    <description>Recent content in Sangbae Yun on Golang Korean Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Sep 2016 13:10:03 +0900</lastBuildDate>
    <atom:link href="https://golangkorea.github.io/authors/sangbae-yun/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go의 주요 특징들</title>
      <link>https://golangkorea.github.io/post/go-start/feature/</link>
      <pubDate>Mon, 12 Sep 2016 13:10:03 +0900</pubDate>
      
      <guid>https://golangkorea.github.io/post/go-start/feature/</guid>
      <description>

&lt;h2 id=&#34;단순함&#34;&gt;단순함&lt;/h2&gt;

&lt;p&gt;Go 언어는 단순함(simplicity)과 실용성(pragmatism)을 지향하는 언어로 이 두가지 철학이 다른 모든 것들 보다 상위에 있다. go 언어에 없는 것들을 보자.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;패턴매칭&lt;/li&gt;
&lt;li&gt;함수 프로그래밍 : 어느 정도 특징을 가지고 있기는 하지만 지향점은 아니다.&lt;/li&gt;
&lt;li&gt;immutable variables&lt;/li&gt;
&lt;li&gt;Option types : 값외에 유효한지, 초기화가 됐는지 등의 추가적인 정보를 설정할 수 있다.&lt;/li&gt;
&lt;li&gt;예외(exception)가 없다.&lt;/li&gt;
&lt;li&gt;클래스도 없다.&lt;/li&gt;
&lt;li&gt;제너릭(generics)를 지원하지도 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현대적인 언어들이라면 당연히 가지고 있음직한 굵직한 특성들을 가지고 있지 않다. 심지어 &amp;ldquo;Go는 40년 동안의 프로그래밍 언어에 대한 연구를 던져버린 유일한 언어&amp;rdquo;라고 평가를 받기도 한다(제너릭의 경우 지원하려는 움직임이 있는 것 같기는 하다). 그리고 이러한 철학을 그대로 하고 있는데, 1.0 버전이 나온 이후 1.7 까지 문법적인 변화가 거의 없다.&lt;/p&gt;

&lt;p&gt;1.0 이 나온게 2012년이니 5년 동안 변한게 없다는 이야기다. 따라서 개발자는 호환성 문제에서 자유로우며, 기술에 대한 숙련도를 꾸준히 유지 할 수 있다. 단순함을 포기하지 않기 때문에 가능한 일이다. &lt;a href=&#34;https://golang.org/doc/devel/release.html&#34;&gt;Go release History&lt;/a&gt;에서 버전별 변경점을 찾아 볼 수 있는데, 버그 수정, 지원 플랫폼, 툴 추가, 컴파일러 변경, 가비지 컬랙터 효율화 등 언어 내적인 것들이 대부분이다.&lt;/p&gt;

&lt;p&gt;계속 단순함을 유지하면서, 언어적인 발전이 가능 할 것인지에 대한 의구심을 가질 수 있다. 이렇게 생각해보자. 복싱은 주먹을 사용하는 격투기 중 최고로 평가받고 있다. 그런데 복싱이 가지고 있는 기술이라는게 스트레이트, 잽, 어퍼, 훅 4가지 밖에 없다. 기술이 적기 때문에 시작하기가 쉽고 반복훈련을 통해서 빠르게 기량을 높일 수 있다. 그리고 직관적인 만큼 실전에서의 응용이 용이하다.&lt;/p&gt;

&lt;p&gt;Go 언어도 마찬가지다. 1-2주면 언어의 거의 모든 기능에 익숙해질 수 있으며, 반복 훈련을 통해서 빠르게 기량을 높일 수 있다. 코드가 직관적이기 때문에 코드를 만들고 읽는게 쉬우며 그만큼 실전에 빠르게 써먹을 수 있다.&lt;/p&gt;

&lt;p&gt;물론 언어의 단순함이 모든 경우에 장점이 될 수는 없을 것이다. Go 언어는 시스템, 네트워크 프로그램 특히 클라우드 환경에서 작동하는 프로그램의 개발에는 강력한 면모를 보여주지만 모바일, 데스크탑 애플리케이션에도 강점을 보여줄지는 의문이다(애초에 이쪽은 별로 신경을 쓰고 있지 않기 때문에 판단하기는 애매모호하긴 하다).&lt;/p&gt;

&lt;h2 id=&#34;클라우드와-친한-go-언어&#34;&gt;클라우드와 친한 go 언어&lt;/h2&gt;

&lt;p&gt;단순함과 이로부터 파생되는 특징은 클라우드 환경에 잘 맞는 경향이 있다. 분산환경은 시스템이 분산된다는 의미외에 소프트웨어가 분산된다는 의미도 있다. 이런 환경에서는 소프트웨어들이 많은 기능을 가지고 있을 필요가 없다. 필수적인 기능만 가진 여러 소프트웨어들이 서로 데이터를 주고 받는 식으로 작동을 하는게 더 효율적이다. 이런 소프트웨어 운영 모델은 리눅스에서 찾아볼 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ps aux | grep chorm | grep -v grep | awk &#39;{print $2}&#39; | xargs kill 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ps로 프로세스 목록을 출력하면 grep으로 chrom 프로세스의 정보만 가져오고, awk를 이용해서 &lt;strong&gt;PID&lt;/strong&gt;를 읽어서 kill로 죽이는 일을 하는 스크립트다. 클라우드환경에서 뜨는 &lt;strong&gt;MSA&lt;/strong&gt;(go언어를 이용한 MSA 문서를 만들어봐야 겠다.)가 이런 방식으로 작동한다.&lt;/p&gt;

&lt;p&gt;클라우드는 컴퓨터와 네트워크, 운영체제를 하나로 통합한다. 이런 환경에서 프로그래밍 언어의 버전, 라이브러리 의존성을 신경쓰면서 애플리케이션을 배포하는 건 굉장히 어려운 일이다. 최근 도커(docker)가 핫한 것도 운영체제 등 주변환경이 어떻든지 간에 자유롭게 배포 할 수 있고, 동일하게 작동 할 것을 보장해 주기 때문이다.&lt;/p&gt;

&lt;p&gt;Go 언어로도 이런 개발 &amp;amp; 배포 환경을 만들 수 있다. 도커와 함께 클라우드를 위한 컨테이너 솔류션을 만들고 싶다면 Go는 최고의 선택이 될 것이다.&lt;/p&gt;

&lt;h2 id=&#34;struct를-이용한-객체지향&#34;&gt;struct를 이용한 객체지향&lt;/h2&gt;

&lt;p&gt;Go는 클래스와 객체가 없다. 그렇다고 해서 객체지향 언어가 아니라고 하기도 그렇다. 원래 객체지향이라는 것은 프로그래밍 방법론으로 언어와 상관이 있는 것은 아니다. C언어로도 객체지향을 할 수 있고, C++로도 절차지향을 할 수 있다. 다만 얼마나 객체지향 프로그래밍을 잘 지원하느냐에 대한 차이는 있는데, 표면적으로는 클래스와 객체가 있는지를 기준으로 삼는 경우가 많다. 상속역시 지원하지 않는다. Go는 전통적인 의미에서의 객체지향 언어라고 하기는 애매모호 하다.&lt;/p&gt;

&lt;p&gt;하지만 메서드를 만들 수 있으며, interface를 이용해서 다형성을 구현 할 수도 있다. &lt;strong&gt;composition&lt;/strong&gt;으로 상속을 대신 할 수도 있다. 뭔가 편법을 동원한다는 느낌이 들 수도 있겠지만, 객체지향에 있어서 반드시 무엇을 해야 한다는 어떤 규칙은 없다. Sandi Metz은 이렇게 말하고 있다. &amp;ldquo;객체지향에 있어서 클래스와 상속은 옵션이며, 한 문제는 다양한 방법으로 풀 수 있다.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;struct는 하나 이상의 필드들로 구성된 데이터 타입으로 레코드 형식의 데이터 그룹을 만들기 위해서 사용한다. 개인 정보를 다루는 애플리케이션을 개발한다면 아래와 같은 &lt;strong&gt;person&lt;/strong&gt; 스트럭처를 만들 수 있을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type person struct {
    name string
    age  int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;소프트웨어 공학에서 기본적으로 클래스는 속성과 메서드의 모음으로 표현된다. 파이썬의 경우를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    minAge = 0
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def Hello(self):
        print(&amp;quot;Hello. My name is %s&amp;quot; % self.name)
    def MyAge(self):
        print(&amp;quot;My age is %s&amp;quot; % self.age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;minAge와 self.name, self.age라는 속성과 Hello, MyAge라는 메서드를 가지는 Person 클래스를 만들었다. 일반적으로 알고 있는 클래스의 모습이다.&lt;/p&gt;

&lt;p&gt;반면 go는 struct와 메서드가 서로 분리된다. 위의 파이썬 코드를 go 코드로 만들어봤다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Person struct {
    minAge int
    name   string
    age    int
}

func (p Person) Hello() {
    fmt.Printf(&amp;quot;Hello. My name is %s\n&amp;quot;, p.name)
}

func (p Person) MyAge() {
    fmt.Printf(&amp;quot;My age is %d\n&amp;quot;, p.age)
}

func main() {
    yundream := Person{minAge: 0, name: &amp;quot;yundream&amp;quot;, age: 33}
    yundream.Hello()
    yundream.MyAge()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/Slj3hhovW4&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;뭔가 굉장히 낯설어 보인다. 일단 캡슐화는 지원한다. 보통 &lt;strong&gt;private, public&lt;/strong&gt; 키워드를 이용하는데, Go언어에는 이런게 없다. 대신 대/소 문자로 구분을 한다. 대문자로 시작하면 public, 소문자로 시작하면 private가 되는 식이다.  private 변수나 메서드는 패키지 내에서만 사용 할 수 있다.&lt;/p&gt;

&lt;p&gt;메서드가 구조체와 분리되기 때문에, 이 메서드가 어느 구조체에 연결된 것인지를 구분해야 한다. &lt;strong&gt;수신자(receiver - func 키워드와 함수명 사이에 위치한다)&lt;/strong&gt;를 이용해서, 연결된 구조체를 확인 할 수 있다. 메서드는 &lt;strong&gt;.&lt;/strong&gt; 연산자를 이용해서 호출 할 수 있다.&lt;/p&gt;

&lt;p&gt;Go는 생성자가 없다. 예제에서 처럼, 구조체를 생성 할 때 초기값을 할당 하거나 혹은 구조체 객체의 포인터를 반환하는 &lt;strong&gt;New&lt;/strong&gt; 함수를 만들어서 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func New(minAge int, name string, int age) *Person {
    return &amp;amp;Person{minAge: minAge, name: name, age: age}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;에러-처리&#34;&gt;에러 처리&lt;/h2&gt;

&lt;p&gt;Go는 예외(execption)가 없다. C언어와 같이 반환 값이 에러인지 아닌지를 비교하는 방법으로 에러를 처리한다. 대신 에러만을 전문적으로 처리하는 &lt;strong&gt;error&lt;/strong&gt; 타입을 내장하고 있다. Go 프로그램은 error 값을 검사하는 것으로 에러 상태를 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 go는 두 개 이상의 값을 반환 할 수 있다. 이 특징을 이용하면 실행 반환 값과 에러를 함께 넘기는 방식으로 에러를 처리할 수 있다. 예를 들어 os.Open 함수는 열린 파일의 데이터를 담고 있는 File 구조체와 error를 함께 반환한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Open(name string) (file *File, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드에서는 error 값이 &amp;ldquo;nil&amp;rdquo;인지 아닌지로 에러를 검사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;f, err := os.Open(&amp;quot;filename.txt&amp;quot;)
if err != nil {
    fmt.Println(&amp;quot;File open error : &amp;quot;, err.Error())
    os.Exit(1)
}
// 파일 처리
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;예외 처리가 없기 때문에 C 언어처럼 모든 에러 리턴에 대한 코드를 만들어야 한다. 함수를 만들다 보면 에러처리 코드가 절반이상을 차지하는 것을 심심찮게 볼 수 있다.&lt;/p&gt;

&lt;p&gt;개발자는 &lt;strong&gt;errors&lt;/strong&gt; 패키지를 이용해서 직접 에러를 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;errors&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
)

func YourLevel(point int) (int, error) {
    if point &amp;lt; 0 {
        return 0, errors.New(&amp;quot;Level: 레벨 값은 0보다 커야 합니다.&amp;quot;)
    }
    if point &amp;gt; 255 {
        return 0, errors.New(&amp;quot;Level: 레벨 값은 255보다 작아야 합니다.&amp;quot;)
    }
    return point / 10, nil
}

func main() {
    level, err := YourLevel(25)
    if err != nil {
        fmt.Println(&amp;quot;Error &amp;quot;, err.Error())
        os.Exit(1)
    }
    fmt.Printf(&amp;quot;당신의 레벨은 %d 입니다.\n&amp;quot;, level)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/zKZHQ7Obm1&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;실제 코드에서는 아래와 같이 에러 케이스를 정의해서 사용한다. 위 코드를 약간 수정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var StatusPointUnderZero = errors.New(&amp;quot;Level: 레벨 값은 0보다 커야 합니다.&amp;quot;)
var StatusPointOverflow = errors.New(&amp;quot;Level: 레벨 값은 255보다 작아야 합니다.&amp;quot;)

func YourLevel(point int) (int, error) {
    if point &amp;lt; 0 {
        return 0, StatusPointUnberZero
    }   
    if point &amp;gt; 255 {
        return 0, StatusPointOverflow
    }   
    return point / 10, nil
}   
func main() {
    level, err := YourLevel(25)
    switch err {
    case StatusPointUnberZero:
        // 에러처리 코드
    case StatusPointOverflow:
        // 에러처리코드
    default:
        // 에러처리 코드
    }  
    fmt.Printf(&amp;quot;당신의 레벨은 %d 입니다.\n&amp;quot;, level)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다른 예제를 이용해서 &lt;strong&gt;error&lt;/strong&gt;를 이용한 에러 처리가 가지는 장점을 살펴보자. 아래 프로그램은 입력 값이 양수인지 음수인지를 검사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

// Positive returns true if the number is positive, false if it is negative.
func Positive(n int) bool {
        return n &amp;gt; -1
}

func Check(n int) {
        if Positive(n) {
                fmt.Println(n, &amp;quot;is positive&amp;quot;)
        } else {
                fmt.Println(n, &amp;quot;is negative&amp;quot;)
        }
}

func main() {
	Check(1)
	Check(0)
	Check(-1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/oMfSuAqw74&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로그램의 실행 결과다. 버그를 가지고 있음을 알 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 is positive
0 is positive
-1 is negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0은 양수도 아니고 음수도 아니다. 양수, 음수, 0 이렇게 3개의 상태를 가지기 때문에 boolean 으로는 이들 상태를 처리 할 수없다.&lt;/p&gt;

&lt;p&gt;Go언어는 2개 이상의 반환 값을 가질 수 있으므로, 0인지를 측정 할 수 있는 값을 반환하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 입력값이 0일 경우 두번째 리턴값으로 false를 반환한다.
func Positive(n int) (bool, bool) {
    if n == 0 {
        return false, false
    }
    return n &amp;gt; -1, true
}

func Check(n int) {
    pos, ok := Positive(n)
    if !ok {
        fmt.Println(n, &amp;quot;is neither&amp;quot;)
        return
    }
    if pos {
        fmt.Println(n, &amp;quot;is positive&amp;quot;)
    } else {
        fmt.Println(n, &amp;quot;is negative&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;프로그램을 실행해보자. 버그가 잡혔다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 is positive
0 is neither
-1 is negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;문제없이 작동하지만 좋은 코드는 아니다. 일단 직관적이지 않다. 코드를 열어 보기 전에는 두 개의 boolean 반환 값이 무엇을 의미하는지 알 수가 없다. error를 이용해서 0 값을 예외처리 하도록 바꿔보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Positive(n int) (bool, error) {
    if n == 0 {
        return false, errors.New(&amp;quot;undefined&amp;quot;)
    }
    return n &amp;gt; -1, nil
}

func Check(n int) {
    pos, err := Positive(n)
    if err != nil {
        fmt.Println(n, err)
        return
    }
    if pos {
        fmt.Println(n, &amp;quot;is positive&amp;quot;)
    } else {
        fmt.Println(n, &amp;quot;is negative&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하는 일은 차이가 없으나 코드가 명료해졌다.&lt;/p&gt;

&lt;h2 id=&#34;동시성-프로그래밍&#34;&gt;동시성 프로그래밍&lt;/h2&gt;

&lt;p&gt;Go에서 제공하는 고루틴이라고 기능을 이용해서 다른 함수를 동시에 실행 할 수 있다. 쓰레드와 비슷하게 작동한다. Go에서 고루틴은 &lt;strong&gt;일급 객체(first class)&lt;/strong&gt;로 정수(integer)나 실수(floating point number)와 같은 데이터 타입과 동급으로 취급한다. 일급객체에 대해서는 &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_citizen&#34;&gt;wikipedia 문서 &lt;/a&gt;를 참고하자. 아래 예제 코드를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func f(id int) {
    for i := 0; i &amp;lt; 10; i++ {
        fmt.Println(id, &amp;quot;:&amp;quot;, i)
    }
}

func main() {
    go f(0)
    var input string
    fmt.Scanln(&amp;amp;input)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 키워드 뒤에 동시 실행할 함수를 두면, 해당 함수를 실행하는 고루틴이 만들어진다. 고루틴과 main함수는 서로 독립적으로 진행이 된다. main 함수가 고루틴 보다 먼저 종료 할 수 있기 때문에 &lt;strong&gt;Scanln&lt;/strong&gt; 함수를 이용해서 기다리게 했다.&lt;/p&gt;

&lt;p&gt;10개의 고루틴을 만들어보자. 그냥 go를 열번 호출하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run goroutine.go 
0 : 0
0 : 1
0 : 2
0 : 3
0 : 4
0 : 5
0 : 6
0 : 7
0 : 8
0 : 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;채널(channel)은 고루틴들 간에 데이터를 교환하기 위해서 사용한다. Go도 공유 잠금을 지원하기는 하지만 메시지 교환방식을 선호한다. 아래는 고루틴간 ping 메시지를 교환하는 간단한 프로그램이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func pinger(c chan string) {
    for i := 0; ; i++ {
        c &amp;lt;- &amp;quot;ping&amp;quot;
    }
}

func pingPrinter(c chan string) {
    for {
        msg := &amp;lt;-c
        fmt.Println(msg)
        time.Sleep(time.Second * 1)
    }
}

func main() {
    var c chan string = make(chan string)

    go pinger(c)
    go pingPrinter(c)

    var input string
    fmt.Scanln(&amp;amp;input)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;chan&lt;/strong&gt; 키워드를 이용해서 채널 타입 데이터를 만들 수 있다. 채널은 메시지를 주고 받는 통로 역할을 하는데 struct를 포함한 모든 종류의 데이터들을 주고 받을 수 있다. 코드에서는 string 타입 데이터를 위한 채널을 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;-&lt;/strong&gt; 연산자를 이용해서 채널에 데이터를 쓰거나 읽을 수 있다. &lt;strong&gt;c &amp;lt;- &amp;ldquo;ping&amp;rdquo;&lt;/strong&gt;는 채널에 &amp;ldquo;ping&amp;rdquo;을 쓰겠다는 의미고, &lt;strong&gt;msg := &amp;lt;-c&lt;/strong&gt;는 채널에서 읽은 데이터를 msg에 저장하겠다는 의미다.&lt;/p&gt;

&lt;h2 id=&#34;인터페이스&#34;&gt;인터페이스&lt;/h2&gt;

&lt;p&gt;인터페이스는 &lt;strong&gt;메서드&lt;/strong&gt;들의 모음으로 간단히 정의 할 수 있다. 또한 그 자체로 하나의 타입이기도 하다. 메서드들의 형태만 정의하고, 구현은 외부에 맡기는 방식으로 유연한 코드를 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type Shape interface {
    Area() float64
    Type()
}

type Rectangle struct {
    width  float64
    height float64
}

func (r Rectangle) Area() float64 {
    return r.width * r.height
}

func (r Rectangle) Type() {
    fmt.Println(&amp;quot;I&#39;m rectangle&amp;quot;)
}

type Circle struct {
    radius float64
}

func (c Circle) Area() float64 {
    return math.Pi * c.radius * c.radius
}

func (c Circle) Type() {
    fmt.Println(&amp;quot;I&#39;m circle&amp;quot;)
}

func main() {
    rec := []Shape{
        Rectangle{width: 10, height: 20},
        Circle{radius: 12},
    }

    for _, s := range rec {
        s.Type()
        fmt.Println(&amp;quot;Area :&amp;quot;, s.Area())
        fmt.Println(&amp;quot;===========&amp;quot;)
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행 결과&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I&#39;m rectangle
Area : 200
===========
I&#39;m circle
Area : 452.3893421169302
===========
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;웹-프로그래밍&#34;&gt;웹 프로그래밍&lt;/h3&gt;

&lt;p&gt;Go는 특히 MSA모델의 웹 애플리케이션 개발을 잘 지원한다. 기본으로 지원하는 &lt;strong&gt;net/http&lt;/strong&gt;와 &lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;gorilla&lt;/a&gt;만으로도 훌륭하게 작동하는 웹 애플리케이션 서버를 개발 할 수 있다. 다른 프레임워크를 사용할 필요가 없다. &lt;a href=&#34;http://www.joinc.co.kr/w/man/12/golang/HTTPPerf&#34;&gt;그리고 성능도 매우 뛰어나다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;아래는 net/http와 gorilla를 이용해서 만든 간단한 웹 애플리케이션 서버다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/gorilla/mux&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;strconv&amp;quot;
)

func hello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &amp;quot;Hello world&amp;quot;)
}

func sum(w http.ResponseWriter, r *http.Request) {
    v := mux.Vars(r)
    a, _ := strconv.Atoi(v[&amp;quot;a&amp;quot;])
    b, _ := strconv.Atoi(v[&amp;quot;b&amp;quot;])
    fmt.Fprintf(w, &amp;quot;%d&amp;quot;, a+b)
}
func main() {
    h := mux.NewRouter()
    h.HandleFunc(&amp;quot;/hello&amp;quot;, hello).Methods(&amp;quot;GET&amp;quot;)
    h.HandleFunc(&amp;quot;/sum/{a}/{b}&amp;quot;, sum).Methods(&amp;quot;GET&amp;quot;)
    http.Handle(&amp;quot;/&amp;quot;, h)
    http.ListenAndServe(&amp;quot;:3000&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;군더더기를 찾아볼 수 없는 단순하고 이해하기 쉬운 코드다.&lt;/p&gt;

&lt;h3 id=&#34;유닛테스트&#34;&gt;유닛테스트&lt;/h3&gt;

&lt;p&gt;Go언어는 분산환경에 최적화된 측면이 있다. 분산환경에서는 테스트해야 할 기능이 명확하기 때문에 유닛테스트의 효과를 크게 누릴 수 있다. 특히 Go 언어는 &lt;strong&gt;Simple is best&lt;/strong&gt; 철학을 지향하기 때문에, 유닛테스트의 활용이 중요하다. Go가 유닛테스트를 기본으로 제공하는 것도 이런 이유 때문일 것이다.&lt;/p&gt;

&lt;p&gt;유닛 테스트를 위해서 &lt;strong&gt;mymath&lt;/strong&gt;라는 간단한 패키지를 만들었다. 이 코드는 &lt;a href=&#34;https://github.com/yundream/mymath&#34;&gt;github&lt;/a&gt;에서 다운로드 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mymath

import (
    &amp;quot;errors&amp;quot;
)

var (
    StatusDivideZero = errors.New(&amp;quot;Divide zero&amp;quot;)
)

func Div(a float64, b float64) (float64, error) {
    if b == 0 {
        return 0, StatusDivideZero
    }
    return a / b, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래는 테스트 코드다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mymath

import (
    &amp;quot;testing&amp;quot;
)

func Test_Div(t *testing.T) {
    _, err := Div(1, 0)
    if err != StatusDivideZero {
        t.Error(&amp;quot;Divide zero&amp;quot;)
    }
    v, err := Div(10, 5)
    if v != 2 {
        t.Fatal(&amp;quot;10/5 = 2 but &amp;quot;, v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;go test&lt;/strong&gt; 명령을 실행하면, 현재 패키지 디렉토리에 있는 파일에서 테스트 코드를 찾아서 실행 한다. 함수의 이름이 &lt;strong&gt;Test&lt;/strong&gt; 로 시작하고 *testing.T 를 매개변수로 사용하면 테스트 함수인 것으로 간주한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test
PASS
ok  	github.com/yundream/mymath	0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-cover&lt;/strong&gt; 옵션을 이용하면 테스트 커버리지 레포팅도 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test -cover
PASS
coverage: 100.0% of statements
ok  	github.com/yundream/mymath	0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go는 함수 단위의 유닛 테스트 도구 뿐만 아니라 웹 애플리케이션 서버 단위의 테스트 툴도 제공한다. 직접 웹 서버를 실행해서 핸들러들을 테스트하고 커버리지를 측정하는 식으로 작동한다. 웹 애플리케이션 서버 개발 편에서 자세히 다뤄볼 계획이다.&lt;/p&gt;

&lt;h3 id=&#34;문서화&#34;&gt;문서화&lt;/h3&gt;

&lt;p&gt;코드 문서화 도구까지 기본 툴로 제공하고 있다.&lt;/p&gt;

&lt;h3 id=&#34;마치며&#34;&gt;마치며&lt;/h3&gt;

&lt;p&gt;여기에서는 Go 언어의 주요 특징들만 간단하게 살펴봤다. 자세한 내용들은 주제별로 따로 다루도록 하겠다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go언어 시작하기</title>
      <link>https://golangkorea.github.io/post/go-start/getting-start/</link>
      <pubDate>Sun, 28 Aug 2016 15:10:07 +0830</pubDate>
      
      <guid>https://golangkorea.github.io/post/go-start/getting-start/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://digveloper.ppillip.com/wp-content/uploads/2013/04/appenginegophercolor.jpg&#34; alt=&#34;Go 로고&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;go-언어에-대해서&#34;&gt;Go 언어에 대해서&lt;/h2&gt;

&lt;p&gt;구글이 2009년에 만든 비교적 새로운 프로그래밍 언어다. 2009년이면 거의 7년 이상된 구닥다리 언어잖아? 라고 생각 할 수 있겠으나, Ruby(1996년) 나 python(1991년) 과 비교해보면 느낌이 다를 것이다. V8 자바스크립트 엔진 개발에 참여했던 &lt;strong&gt;Robert Griesemer&lt;/strong&gt;, UTF-8을 만든 &lt;strong&gt;Rob Pike&lt;/strong&gt;, 초창기 유닉스 운영체제를 설계했으며 B언어(C언어의 전신)를 개발한 &lt;strong&gt;Ken Thompson&lt;/strong&gt;등 쟁쟁한 개발자들이 만든 언어다. 구글이 개발 했다는 프리미엄과 함께 &lt;strong&gt;도커(Docker)&lt;/strong&gt;의 개발 언어라는게 알려지면서 유명세를 타게 됐다.&lt;/p&gt;

&lt;p&gt;Python이나 Java와 같은 범용 프로그래밍 언어이며, 시스템 프로그래밍과 네트워크 프로그램의 개발을 목표로 만들어진 언어다. 비교적 최근에 만들어진 언어답게 C++, Java, Python 언어들의 장점을 상당 부분 수용했다. 이렇게 보면 최신 프로그래밍 언어들의 트랜드를 따를 것 같지만 코드는 &lt;strong&gt;C 언어&lt;/strong&gt;와 매우 비슷한 느낌을 준다.&lt;/p&gt;

&lt;p&gt;C 언어 처럼 컴파일이 되며, 컴파일 시간에 타입을 체크하는 정적 타입 언어다. 그리고 C 언어처럼 단순하다. 약 25개 정도의 키워드만이 제공되는데, 실제 코드를 만들다 보면 10개 내외의 키워드 만으로 프로그래밍이 가능하다. 아래 go 언어가 제공하는 키워드들이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;프로그래밍 언어에 대한 경험이 있다면 chan, defer, fallthrough 등을 제외한 키워드들의 이름과 용도를 미루어 짐작할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;키워드가 적은 만큼 복잡한 준비작업 없이 쉽게 시작 할 수 있으며, 몇 개의 키워드로 반복 사용 함으로써 프로그래밍 숙련도를 빠르게 높일 수 있다는 것도 큰 장점이다.&lt;/p&gt;

&lt;p&gt;Go 언어는 &lt;strong&gt;동시성(concurrency)&lt;/strong&gt;를 잘 지원하는 것으로 유명하다. Go는 &lt;strong&gt;고루틴(goroutine)&lt;/strong&gt;라는 경량스레드(lightweight thread)를 제공하는데, 고루틴간 메시지를 주고 받을 수 있는 채널(channel)을 이용하면, 아주 쉽게(정말 쉽다) 동시성 프로그램을 개발 할 수 있다. 고루틴은 얼랑(Erlang)의 경량 쓰레드와 매우 유사한데, &lt;strong&gt;2k&lt;/strong&gt; 정도로 그 크기가 매우 작다. 많은 수의 고루틴을 시스템 부담을 최소화 하면서 만들 수 있다.&lt;/p&gt;

&lt;p&gt;Go 언어를 사용하다보면, 웹 애플리케이션을 만들기가 매우 편하다는 느낌을 받게 된다. 특히 &lt;strong&gt;MSA(Microservice Architecture)&lt;/strong&gt;와 &lt;strong&gt;REST(Representational State Transfer)&lt;/strong&gt; 모델의 애플리케이션을 쉽게 만들 수 있다. 루비나 파이선 같은 언어의 경우 다양한 &lt;strong&gt;웹 프레임워크&lt;/strong&gt;중에서 선택을 고민하게 마련인데, Go 언어는 기본으로 제공하는 &lt;strong&gt;net/http&lt;/strong&gt; 패키지로 충분하다. 물론 Go 언어도 다양한 마이크로 프레임워크와 풀 프레임워크를 제공하긴 하지만 이런 프레임워크를 쓰면, &amp;ldquo;왜 프레임워크를 쓰세요 ? 그냥 기본(net/http) 패키지 쓰세요&amp;rdquo;라는 말을 들을 정도로 강력하다.&lt;/p&gt;

&lt;p&gt;대규모의 분산 시스템을 유지해야 하는 구글의 요구를 위해서 웹 개발 관련 패키지가 강력해진 것 같다.&lt;/p&gt;

&lt;h2 id=&#34;go-시작하기&#34;&gt;Go 시작하기&lt;/h2&gt;

&lt;h3 id=&#34;go-설치&#34;&gt;Go 설치&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;golang.org&lt;/a&gt;에서 운영체제별로 Go 언어를 다운로드 할 수 있다. 2016년 8월 현재 최신 버전은 1.7이다. 압축을 푼 다음 &lt;strong&gt;/usr/local&lt;/strong&gt; 디렉토리로 복사했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz
# tar -xvzf go1.7.linux-amd64.tar.gz
# mv go /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 실행을 위해서 환경 변수를 설정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# export PATH=$PATH:/usr/local/go/bin
# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go를 실행해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# go version
go version go1.7 linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 작업 디렉토리 &amp;ldquo;&amp;lsquo;workspace&amp;rdquo;&amp;lsquo;를 만들었다. Go언어에게 작업 디렉토리를 알려주기 위해서 환경변수 &lt;strong&gt;GOPATH&lt;/strong&gt;도 설정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir $HOME/workspace
# export GOPATH:$HOME/workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이들 환경변수들은 .bashrc 등에 설정해서, 로그인 시간에 적용되도록 하자.&lt;/p&gt;

&lt;p&gt;이것으로 go 언어 개발 환경을 마쳤다. 이제 Hello World 프로그램을 만들면서 Go 프로그램의 기본적인 특징들을 살펴보자.&lt;/p&gt;

&lt;h3 id=&#34;패키지-관리-시스템&#34;&gt;패키지 관리 시스템&lt;/h3&gt;

&lt;p&gt;Hello World 프로그램을 만들기 전에 Go 언어의 패키지 관리 시스템을 살펴봐야 할 것같다. 앞서 나는 workspace 라는 작업 디렉토리를 만들었다. 다른 프로그램이라면 workspace 디렉토리 밑에 프로젝트 파일을 만드는 것으로 개발을 시작할 것이다. 예컨데 mkdir workspace/helloworld 로 디렉토리를 먼저 만들 것이다.&lt;/p&gt;

&lt;p&gt;go 언어는 다르다. 우선 go 언어는 &lt;strong&gt;인터넷&lt;/strong&gt;을 기본 개발 환경으로 한다. Go로 원할히 개발하기 위해서는 컴퓨터가 인터넷에 연결되어 있어야 하며, 코드를 저장하고 읽기 위한 github, bitbucket 혹은 직접 구성한 git 서버가 있어야 한다. 즉 go 언어에서 패키지는 프로젝트 저장소 단위로 관리한다.&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;strong&gt;sqlite3&lt;/strong&gt;을 사용하는 애플리케이션을 개발한다고 가정해 보자. 이를 위해서 sqlite3 패키지를 go get으로 다운로드 해야 하는데 git 주소로 부터 다운로드 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/mattn/go-sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;거의 모든 패키지가 이처럼 인터넷 상에 있는 git으로 관리 되고 있다. sqlite3 패키지를 설치한 후 workspace를 살펴보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── pkg
│   └── linux_amd64
│       └── github.com
│           └── mattn
│               └── go-sqlite3.a
├── src 
|   └── github.com
|       └── mattn
|           └── go-sqlite3
|               ├── backup.go
|               ├── backup_test.go
|               ├── callback.go
|               ├── callback_test.go
└── bin 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패키지의 경로가 github 경로인 것을 확인 할 수 있다. 물론 인터넷에 연결하지 않고도 프로젝트를 수행 할 수는 있지만 제대로 go 프로그래밍을 하려면 인터넷과 github 계정이 필요하다. 아래 주요 디렉토리의 용도를 정리했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src : 패키지의 소스코드가 위치한다.&lt;/li&gt;
&lt;li&gt;pkg : 패키지의 소스코드를 빌드해서 만들어진 라이브러리 파일(.a - ar archive 파일)이 위치한다. go-sqlite3.a 파일이 보일 것이다.&lt;/li&gt;
&lt;li&gt;bin : 패키지가 main 함수를 포함할 경우 실행 파일이 만들어 지는데, 이들 실행파일이 복사된다. go-sqlite3는 실행파일이 없으므로 bin에 파일이 복사되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래에서 다룰 Hello World 프로젝트도 github 기반으로 진행 할 것이다. github 계정이 없다면 지금 계정을 만들자. 내가 사용하고 있는 github 계정은 &lt;strong&gt;yundream&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;h3 id=&#34;hello-world를-만들어보자&#34;&gt;Hello World를 만들어보자.&lt;/h3&gt;

&lt;p&gt;Hello World 프로젝트를 시작하기 위해서 내가 사용하는 github 계정에 helloworld 프로젝트를 만들었다. 프로젝트를 만들 때 &lt;strong&gt;Initialize this repository with a README&lt;/strong&gt; 옵션을 체크하자. 이제 go get 명령을 이용해서 패키지를 다운로드 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/yundream/helloworld
package github.com/yundream/helloworld: no buildable Go source files in /home/yundream/golang/src/github.com/yundream/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;지금은 README.md 파일만 있으므로 빌드 할 수 있는 go 파일이 없다는 경고메시지뜰 것이다. 무시하자. &lt;strong&gt;GOPATH&lt;/strong&gt; 환경에 등록된 /home/yundream/golang 디렉토리 밑에 패키지를 다운로드(README.md) 해서 설치하는 것을 확인 할 수 있을 것이다. 디렉토리로 이동해서 helloworld.go 파일을 만들어보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;Hello World&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;터미널에 &amp;ldquo;Hello World&amp;rdquo;를 출력하는 간단한 프로그램이다. go run 명령으로 실행해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run main.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go run은 임시디렉토리에서 코드를 컴파일 하고 실행하는 일을 한다. go가 컴파일 언어임에도 불구하고 (컴파일 시간이 매우빠르다)유저 입장에서는 인터프리터 언어처럼 사용 할 수 있다. python 같은 언어에 비해서는 즉시성이 떨어지기는 하지만 왠만한 프로젝트에서는 굳이 컴파일 과정을 거치지 않고도 바로 바로 실행 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;go build&lt;/strong&gt; 명령으로 소스코드를 컴파일 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go build
$ ls
README.md  helloworld  main.go
$ ./helloworld 
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 소스코드를 살펴보자. C 언어와 매우 비슷하다는 느낌을 받을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패키지를 선언한다. 모든 go 언어는 패키지 선언으로 시작해야 한다. 이 패키지이름을 이용해서 코드를 조직화하고 재사용 할 수 있다. C언어와 유사하게 go 언어도 실행 프로그램과 라이브러리, 두 개의 코드 타입을 가지고 있다. 실행 프로그램이란 쉘 에서 명령을 내려서 직접 실행 할 수 있는 (우리가 일반적으로 알고 있는)프로그램이고, 라이브러리는 다른 프로그램에서 이용 할 수 있게 패키징된 코드의 모음이다. 실행 프로그램을 만들기 위한 go 코드는 반드시 &lt;strong&gt;package main&lt;/strong&gt;을 선언해야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;fmt&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;외부 패키지를 import 하기 위해서 사용한다. java의 import와 매우 유사하다. 위에서 go 코드는 실행 프로그램과 라이브러리 타입이 있다고 했던 것을 기억할 것이다. import는 라이브러리 타입의 go 코드를 재사용 하기 위해서 사용한다. 여기에서는 화면과 파일 출력에 관련된 여러 유용한 기능을 담고 있는 &lt;strong&gt;fmt&lt;/strong&gt; 패키지를 import했다. fmt는 git 저장소 경로가 없는데, go에서 제공하는 기본 패키지라고 보면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    fmt.Println(&amp;quot;Hello World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 언어의 기본 구성요소는 함수이며, func 키워드로 정의해서 사용 할 수 있다. 이 함수의 이름은 main 이며, 0개의 매개변수(parameter)과 0개의 반환 값을 가지고 있다. main은 프로그램의 시작 점이 되는 특수한 함수다. 실행 가능한 타입의 go 코드는 반드시 하나의 main 함수를 가지고 있어야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;fmt&lt;/strong&gt;는 패키지 이름으로 해석하자면 fmt 패키지가 가지고 있는 &lt;strong&gt;Println&lt;/strong&gt; 함수를 사용해서 &amp;ldquo;Hello World&amp;rdquo;를 출력하라는 의미가 된다.&lt;/p&gt;

&lt;p&gt;빌드 성공까지 끝냈다면 main.go를 github 저장소에 push하자. 그리고 go get 으로 다시 패키지를 다운로드 해보자. go get으로 패키지를 설치 하면 소스코드들은 $GOPATH/src 밑에 설치된다. 만약 패키지가 실행 가능한 코드 즉 main 함수를 포함하고 있다면 빌드를 수행하고 그 결과를 $GOPATH:/bin 에 복사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# $GOPATH/bin/helloworld
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 프로젝트를 진행하다 보면, go get을 이용해서 go 기반의 소프트웨어들을 설치하게 될 것이다. 이들은 $GOPATH/bin에 설치가 되니, 실행을 위해서 환경변수 PATH에 &lt;strong&gt;$GOPATH/bin&lt;/strong&gt; 도 추가하자.&lt;/p&gt;

&lt;p&gt;만약 패키지를 지우고 싶다면 $GOPATH/src로 이동해서 패키지 디렉토리를(이 경우 $GOPATH/src/github.com/yundream/helloworld) 지워주기만 하면 된다.&lt;/p&gt;

&lt;h3 id=&#34;첫-번째-패키지-개발&#34;&gt;첫 번째 패키지 개발&lt;/h3&gt;

&lt;p&gt;이제 라이브러리 타입의 패키지를 만들어 보자. 패키지의 이름은 &lt;strong&gt;stringutil&lt;/strong&gt;로 문자열 조작과 관련된 함수들을 만들 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package stringutil

func Reverse(s string) string {
	r := []rune(s)
	for i, j := 0, len(r)-1; i &amp;lt; len(r)/2; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	return string(r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reverse 함수 하나만을 포함하고 있다. 매개변수로 받은 문자를 뒤집어서 반환하는 일을 한다.&lt;/p&gt;

&lt;p&gt;github 계정에 stringutil 저장소를 만들고 stringutil.go 파일을 push 한후, go get 으로 패키지를 다운로드하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go get으로 설치된 패키지를 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# go list ... | grep yundream
github.com/yundream/helloworld
github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stringutil는 라이브러리 타입의 패키지로 빌드한 결과는 pkg/ 디렉토리 밑에 .a 파일로 저장된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# file $GOPATH/pkg/linux_amd64/github.com/yundream/stringutil.a
/home/yundream/golang/pkg/linux_amd64/github.com/yundream/stringutil.a: current ar archive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 helloworld 패키지에서 stringutil 패키지를 임포트해서 함수를 사용 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/yundream/stringutil&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;Hello World !!&amp;quot;)
    val := stringutil.Reverse(&amp;quot;ABCDEF&amp;quot;)
    fmt.Println(val)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행해 보면 stringutil.Reverse 함수가 작동하는 걸 확인할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go run main.go 
Hello World !!
FEDCBA
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;one-파일-배포&#34;&gt;One 파일 배포&lt;/h3&gt;

&lt;p&gt;Go 언어에서 라이브러리 타입의 패키지들은 &lt;strong&gt;.a(정적 라이브러리)&lt;/strong&gt; 형태로 만들어진다. &lt;strong&gt;공유 라이브러리(Shared Library - 리눅스는 .so파일 윈도우즈는 dll)&lt;/strong&gt;를 지원하기는 하지만 운영체제에 따라 제한 적일 수 있다. 보통은 정적 라이브러리를 코드내에 포함해서 &lt;strong&gt;하나의 실행 파일로 배포&lt;/strong&gt;하는 방법을 사용한다.&lt;/p&gt;

&lt;p&gt;이 방법은 패키징이 단순해지며, 운영체제의 동적 라이브러리와의 호환문제에서 자유롭기 때문에 배포가 쉬워진다는 장점이 있다. 대신 라이브러리 코드가 포함되므로 코드가 더 커지고, 취약점이 있는 라이브러리에 대한 체크와 업데이트가 쉽지 않다는 문제가 있다. 특정 라이브러리에서 어떤 취약점이 발견됐다면, 해당 라이브러리를 포함한 모든 애플리케이션을 재 빌드 해야 한다.&lt;/p&gt;

&lt;p&gt;현대적인 애플리케이션들이 공유 라이브러리를 선호한다는 점에서 시대에 역행한다는 생각을 가질 수 있을 것이다. 이러한 방식을 선택한 이유를 생각해봐야 한다. 구글은 프라이빗한 클라우드 환경에서 작동하는 시스템 애플리케이션의 개발을 위해서 go 언어를 사용하고 있다. 다양한 운영체제와 운영 환경등을 가지고 있는 클라우드 환경에 애플리케이션을 배포하기 위해서는 외부 의존성을 없애고 빠르게 배포하는게 더 나을 것 이다. 프라이빗한 네트워크에서 실행되며, 직접 서비스에 관여하는 일도 없을 테니 취약점에 대한 대응 문제도 그리 심각하지 않을 것이다.&lt;/p&gt;

&lt;p&gt;클라우드와 같은 분산된 환경에서는 go 언어의 방식이 더 나을 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;마치며&#34;&gt;마치며&lt;/h2&gt;

&lt;p&gt;테스트에 사용한 코드들은 아래 github에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yundream/helloworld&#34;&gt;https://github.com/yundream/helloworld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yundream/stringutil&#34;&gt;https://github.com/yundream/stringutil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/yundream/helloworld
# go get github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>vim-go를 이용한 go 개발 환경 구축</title>
      <link>https://golangkorea.github.io/post/vim-go/</link>
      <pubDate>Mon, 22 Aug 2016 22:57:14 +0900</pubDate>
      
      <guid>https://golangkorea.github.io/post/vim-go/</guid>
      <description>

&lt;h2 id=&#34;vim&#34;&gt;Vim&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;은 Emacs와 함께 (적어도 리눅스에서는) 가장 널리 사용하는 에디터일 것이다. 가볍고 빠르며, 어디에서나 실행되기 때문에 그 단순함에도 불구하고 여전히 사랑받고 있다. GUI 환경에서 사용하는 IDE에 익숙한 개발자라면 &amp;ldquo;요즘 같은 시대에 왠 구닥다리 터미널 기반 에디터냐&amp;rdquo;라고 생각할 지도 모르겠다. 아래 그래프를 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.redditmedia.com/Zemj1bdTRcBwW8bF_UFEVSNZ9S1VrS4tsD4HC1b9jeI.jpg?w=844&amp;amp;s=1fbbaa5fe7f8ba1ba0942191327ffd70&#34; alt=&#34;Go 에디터 사용율&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go언어를 대상으로 조사한 결과인데, Vim이 거의 40% 정도를 차지하고 있다. Emacs까지 하면 터미널 기반 에디터를 사용하는 개발자가 절반이 넘는다. 물론 Go 언어가 시스템과 네트워크 분야의  백앤드 프로그램의 개발에 특화된 측면을 고려해야 겠지만 말이다.&lt;/p&gt;

&lt;h2 id=&#34;vim-go&#34;&gt;Vim-go&lt;/h2&gt;

&lt;p&gt;Vim은 다양한 플러그인을 제공한다. &lt;strong&gt;Vim-go&lt;/strong&gt;는 Go 개발환경을 지원하는 플러그인이다. 지원하는 기능은 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;함수, 오퍼레이터, 메서드들에 대한 Syntax highlighting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gocode&lt;/strong&gt;를 이용한 자동완성&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoDef&lt;/strong&gt;를 이용해서 메서드, 변수들의 선언 위치를 네비게이션 할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoImport&lt;/strong&gt;를 이용한 패키지 임포트&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoTest&lt;/strong&gt;와 &lt;strong&gt;:GoTestFunc&lt;/strong&gt;를 이용한 유닛 테스트&lt;/li&gt;
&lt;li&gt;테스트 커버리지를 위한 &lt;strong&gt;:GoCoverage&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoBuild&lt;/strong&gt;, &lt;strong&gt;:GoInstall&lt;/strong&gt;을 이용한 패키지 컴파일과 설치&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoRun&lt;/strong&gt;을 이용한 빠른 실행&lt;/li&gt;
&lt;li&gt;소스 분석을 위한 &lt;strong&gt;:GoImplements&lt;/strong&gt;, &lt;strong&gt;:GoCallee&lt;/strong&gt;, &lt;strong&gt;:GoReferrer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Lint툴 &lt;strong&gt;:GoLint&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:GoPlay&lt;/strong&gt;로 코드를 &lt;a href=&#34;https://play.golang.org&#34;&gt;play.golang.org&lt;/a&gt; 로 공유
등 개발 환경을 만들기 위한 거의 모든 기능들을 제공한다. 여기에 파일 네비게이션 플러그인, 자동완성 플러그인들을 추가로 설치하면, IDE 부럽지 않은 개발 환경을 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vim-go-설치&#34;&gt;Vim-go 설치&lt;/h2&gt;

&lt;p&gt;Vim의 플러그인들을 편리하게 관리하기 위해서 몇 가지 패키지 매니저들이 있다. 보통 Vundle 이나 &lt;strong&gt;pathogen&lt;/strong&gt;을 사용한다. 나는 pathogen을 사용하고 있다. 아래와 같이 설치하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# mkdir -p ~/.vim/autoload ~ 
/.vim/bundle
# cd ~/.vim/autoload
# curl -LSso pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.vimrc 파일을 수정한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat ~/.vimrc
execute pathogen#infect()
syntax on
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 vim-go를 설치하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd ~/.vim/bundle
# git clone https://github.com/fatih/vim-go.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go 개발을 위한 환경 설정은 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# export GOPATH=$HOME/golang 
# export PATH=$PATH:$GOPATH/bin
# mkdir $HOME/golang
# echo $GOPATH
/home/yundream/golang
# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/yundream/golang/bin....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim-go 프로젝트는 구글의 mercurial에서 관리하고 있다. mercurial도 설치해야 vim-go를 빌드 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# apt-get install mercurial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim을 실행 한후 명령모드에서 &lt;strong&gt;:GoInstallBinaries&lt;/strong&gt;를 수행하면, 자동으로 vim-go를 빌드해서 설치해준다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim
~
~
:GoInstallBinaries
vim-go: gocode not found. Installing github.com/nsf/gocode to folder /home/yundream/.vim-go/
vim-go: goimports not found. Installing code.google.com/p/go.tools/cmd/goimports to folder /home/yundream/.vim-go/
vim-go: godef not found. Installing code.google.com/p/rog-go/exp/cmd/godef to folder /home/yundream/.vim-go/
vim-go: oracle not found. Installing code.google.com/p/go.tools/cmd/oracle to folder /home/yundream/.vim-go/
vim-go: golint not found. Installing github.com/golang/lint/golint to folder /home/yundream/.vim-go/
vim-go: errcheck not found. Installing github.com/kisielk/errcheck to folder /home/yundream/.vim-go/
vim-go: gotags not found. Installing github.com/jstemmer/gotags to folder /home/yundream/.vim-go/
계속하려면 엔터 혹은 명령을 입력하십시오
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vim-go-기능-빠르게-살펴보기&#34;&gt;Vim-go 기능 빠르게 살펴보기&lt;/h2&gt;

&lt;p&gt;Go 코드의 실행&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoRun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;빌드&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:make
:GoBuild
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;에러체크&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoErrCheck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패키지 임포트&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoImport fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;심볼에 대한 정의로 이동. 해동 심볼에서 :GoDef&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoDef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;대략 이런 식이다. 나머지 명령들은 직접 실행해 보자.&lt;/p&gt;

&lt;h2 id=&#34;자동완성&#34;&gt;자동완성&lt;/h2&gt;

&lt;p&gt;자동완성은 IDE의 가장 쓸만한 기능 중 하나일 것이다. vim의  &lt;strong&gt;YCM(YouCompleteMe)&lt;/strong&gt;를 이용해서 자동완성 기능을 추가 할 수 있다. 컴파일을 하기 때문에 python-dev와 cmake 패키지를 미리 설치해야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd ~/.vim/bundle
# git clone https://github.com/Valloric/YouCompleteMe.git
# cd YouCompleteMe
# ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 자동완성 기능을 사용 할 수 있다. 아래 화면을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/-n9eUbylZw50/U_C_wglq1aI/AAAAAAAAEQI/IsIWi6MYrdc/s640/golang-2.png&#34; alt=&#34;YCM 자동완성&#34; /&gt;&lt;/p&gt;

&lt;p&gt;YCM은 C, C++, Python, Java 등에도 사용 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;tagbar-설치&#34;&gt;TagBar 설치&lt;/h2&gt;

&lt;p&gt;ctags는 코드에 포함된 패키지, struct, 메서드의 목록을 한눈에 보여주는 애플리케이션이다. ctags를 설치하자. tagbar는 ctags를 기반으로 작동하는 플러그인이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# apt-get install ctags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tagbar 플러그인을 설치한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd ~/.vim/bundle
# git clone https://github.com/majutsushi/tagbar.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 &lt;strong&gt;:TagbarToggle&lt;/strong&gt; 명령으로 tagbar 네비게이션 창을 열고 닫을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/-xO-ZcWBjqfQ/U_NybrcP-FI/AAAAAAAAEQ8/VjcKCUsrIE0/s640/golang-3.png&#34; alt=&#34;TagBar 적용&#34; /&gt;&lt;/p&gt;

&lt;p&gt;명령어를 입력하기 귀찮다면, 단축 키를 만들자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cat .vimrc
......
map &amp;lt;F8&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nerdtree-설치&#34;&gt;NerdTree 설치&lt;/h2&gt;

&lt;p&gt;NerdTree는 파일 네비게이션을 만들어주는 플러그인다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd ~/.vim/bundle
# git clone https://github.com/scrooloose/nerdtree.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NerdTree와 TagBar를 적용한 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/-yfhTJc0-xMc/U_N0PxZXmEI/AAAAAAAAERE/2n5LUOmtQGw/s640/golang-4.png&#34; alt=&#34;NerdTree와 TagBar 적용&#34; /&gt;&lt;/p&gt;

&lt;p&gt;명령을 일일이 입력하기가 귀찮아서 단축키를 등록했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cat ~/.vimrc
set ts=4
 
map &amp;lt;F8&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
map &amp;lt;F2&amp;gt; :GoDef&amp;lt;CR&amp;gt;
map &amp;lt;F4&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang 프로젝트에 TDD 도입하기</title>
      <link>https://golangkorea.github.io/post/tdd-with-golang/</link>
      <pubDate>Sat, 20 Aug 2016 12:15:44 +0900</pubDate>
      
      <guid>https://golangkorea.github.io/post/tdd-with-golang/</guid>
      <description>

&lt;p&gt;여기에서 사용한 테스트 코드는 &lt;a href=&#34;https://bitbucket.org/dream_yun/handlertest&#34;&gt;Bitbucket&lt;/a&gt; 에서 다운로드 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;

&lt;p&gt;클라우드와 &lt;strong&gt;MSA&lt;/strong&gt;와 &lt;strong&gt;REST&lt;/strong&gt;의 등장으로 TDD가 재조명 받고 있다. TDD를 제대로 적용하려면 상당히 많은 시간과 노력이 필요하다. 특히 여기 저기 연동되는 라이브러리나 소프트웨어가 많은 경우 테스트가 굉장히 복잡해지는데, 복잡해지는 만큼 테스트의 신뢰성도 함께 떨어진다.&lt;/p&gt;

&lt;p&gt;TDD는 &lt;strong&gt;유닛 테스트&lt;/strong&gt;를 기본으로 하는데, 애플리케이션이 복잡해지면 유닛테스트에 간섭하는 객체들이 많아진다. 이렇게 늘어난 객체들에 대해서 테스트를 진행하다 보면 테스트를 위한 설계로 변질되는 경우가 있다.&lt;/p&gt;

&lt;p&gt;데이터베이스, 소켓, UI가 서로 엉켜있는 소프트웨어를 테스트 한다고 생각해보라. 머리 좀 아플 것이다. 물론 TDD가 테스트를 쉽게 할 수 있는 설계를 지향하긴 하지만, 테스트를 쉽게 할 수 있는 설계와 테스트를 위한 설계는 엄연히 다른 것이다.&lt;/p&gt;

&lt;p&gt;TDD의 단점은 아래와 같이 정리 할 수 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;개발 기간이 늘어난다.&lt;/strong&gt; TDD에 익숙해졌다고 가정 할 경우 약 20% 정도 구현시간이 늘어난다. 복잡한 소프트웨어의 경우 더 구현시간은 더 늘어날 것이다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;복잡성 증가.&lt;/strong&gt; 테스트시나리오가 길어질 경우, 시나리오 자체를 관리하는 것도 작업이 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;디자인 변경.&lt;/strong&gt; 종종 TDD에 어울리지 않는 디자인의 소프트웨어를 개발 해야 하는 경우도 있다. TDD는 &lt;strong&gt;좋은 코드는 테스트하기 좋은 코드다&lt;/strong&gt;라고 주장한다. 하지만 항상 그런건 아니다. TDD에 맞추다 보니 디자인이 이상해지는 경우가 종종 생긴다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;요약하자면 실행관점에서 TDD를 위한 기본 요소는 &lt;strong&gt;유닛 테스트&lt;/strong&gt;인데, 소프트웨어가 복잡해지면 굉장히 힘들어 지는게 TDD의 문제다.&lt;/p&gt;

&lt;p&gt;달리 생각하면 소프트웨어가 단순해지면 TDD를 하기 좋은 환경이 된다는 이야기가 되겠다.&lt;strong&gt;MSA와 REST&lt;/strong&gt; 바로 그런 환경이다.&lt;/p&gt;

&lt;p&gt;MSA는 작업 서비스(애플리케이션)들을 결합해서 하나의 큰 서비스를 만드는 서비스 디자인 스타일이다. 각 MSA 서비스들은 다른 서비스들과 독립적으로 구성되고 단순한 기능을 가지도록 설계되기 때문에 유닛 테스트가 큰 효과를 발휘 할 수 있다.&lt;/p&gt;

&lt;p&gt;Go언어는 범용 시스템언어로 개발이 됐지만 &lt;strong&gt;net/http&lt;/strong&gt;와 &lt;strong&gt;gorilla&lt;/strong&gt;를 비롯해서 MSA+REST(이하 MSA) 스타일의 웹 애플리케이션을 효과적으로 만들 수 있도록 지원하고 있다. 나는 Go 언어에서 MSA 애플리케이션을 TDD로 개발하고 테스트 하는 방법을 정리 하려 한다. 이 문서에서 다룰 내용은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go 언어에서 제공하는 유닛테스트 프레임워크를 살펴본다.&lt;/li&gt;
&lt;li&gt;HTTP 핸들러 테스트 : HTTP 웹 서버 핸들러를 테스트하려면, 서버가 실행 중이어야 하기 때문에 메서드 단위의 유닛 테스트로는 테스트가 어렵다. &lt;strong&gt;net/http/httptest&lt;/strong&gt;패키지를 이용해서 HTTP 핸들러를 테스트할 수 있다.&lt;/li&gt;
&lt;li&gt;TDD는 유닛테스만 의미하지 않는다. 개발 에서 배포까지의 전 과정을 &lt;strong&gt;테스트&lt;/strong&gt;를 기반으로 통합하는 일련의 과정들이다. 젠킨스(Jenkins)를 이용해서 TDD를 완성해 본다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;테스트 커버리지는&lt;/strong&gt; 유닛테스트가 얼마나 잘 이루어졌는지를 측정하기 위해서 사용한다. 테스트 커버리지를 계산하고 그 결과를 문서로 출력한다. 이 문서를 젠킨스와 통합해보자.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;go-유닛-테스트-개요&#34;&gt;Go 유닛 테스트 개요&lt;/h2&gt;

&lt;p&gt;Go 는 테스트 프레임워크를 내장(build-in)하고 있다. &lt;strong&gt;testing&lt;/strong&gt;페키지를 이용해서 유닛 테스트 코드를 만들고 &lt;strong&gt;go test&lt;/strong&gt;명령으로 테스트를 수행하면 된다. 유닛 테스트를 위한 간단한 예제 코드를 만들었다. 코드의 이름은 math.go 다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package math

import (
    &amp;quot;errors&amp;quot;
)   

// 값들을 모두 더한다.
func Sum(nums ...int) int {
    total := 0 
    for _, num := range nums {
        total += num
    }
    return total
}   

// a를 b로 나눈다.
func Div(a float64, b float64) (float64, error) {
    if b == 0 {
        return 0.0, errors.New(&amp;quot;Can&#39;t divide by zero&amp;quot;)
    }
    return a / b, nil
}

// 문자열을 count만큼 반복하고 결과를 반화한다.
func StrRept(s string, count int) string {
    b := make([]byte, len(s)*count)
    bp := copy(b, s)
    for bp &amp;lt; len(b) {
        copy(b[bp:], b[bp:])
        bp *= 2
    }
    return string(b)
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;유닛 테스트 파일을 만든다. 파일의 이름은 &lt;strong&gt;math_test.go&lt;/strong&gt;다. 참고로 유닛 테스트 파일의 이름은 반드시 &lt;strong&gt;_test.go&lt;/strong&gt;로 끝나야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package math

import (
    &amp;quot;testing&amp;quot;
)

func Test_Sum(t *testing.T) {
    v0 := Sum(1, 2, 3)
    if v0 != 6 {
        t.Fatal(&amp;quot;1+2+3 == 6&amp;quot;)
    }

    v1 := Sum(6, 5)
    if v1 != 11 {
        t.Fatal(&amp;quot;6+5 == 11 &amp;quot;)
    }
}

func Test_Div(t *testing.T) {
    v2, _ := Div(0, 2)
    t.Log(&amp;quot;0/2 =&amp;quot;,v2)
}

func Test_StrRept(t *testing.T) {
    str := StrRept(&amp;quot;a&amp;quot;, 3)
    if len(str) != 3 {
        t.Fatal(&amp;quot;Repeat fail&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go test를 실행해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go test
PASS
ok  	_/home/yundream/workspace/golang/unitTest	0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-v&lt;/strong&gt; 옵션을 주면 자세한 테스트 정보를 확인 할 수 있다. 로그(t.Log) 정보도 함께 출력한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go test -v
=== RUN   Test_Sum
--- PASS: Test_Sum (0.00s)
=== RUN   Test_Div
--- PASS: Test_Div (0.00s)
	math_test.go:21: 0/2 = 0
=== RUN   Test_StrRept
--- PASS: Test_StrRept (0.00s)
PASS
ok  	_/home/yundream/workspace/golang/unittest	0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Test_StrRept&lt;/strong&gt;테스트를 아래와 같이 수정 한 다음에 테스트해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Test_StrRept(t *testing.T) {
    str := StrRept(&amp;quot;ab&amp;quot;, 3)
    if len(str) != 3 {
        t.Fatal(&amp;quot;Repeat fail&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트 조건을 바꿨는데, 실수로 예상 결과를 수정하지 않았다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test -v
=== RUN   Test_Sum
--- PASS: Test_Sum (0.00s)
=== RUN   Test_Div
--- PASS: Test_Div (0.00s)
	math_test.go:21: 0/2 = 0
=== RUN   Test_StrRept
--- FAIL: Test_StrRept (0.00s)
	math_test.go:27: Repeat fail
FAIL
exit status 1
FAIL	_/home/yundream/workspace/golang/unittest	0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트 실패를 확인 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;testing-패키지&#34;&gt;testing 패키지&lt;/h2&gt;

&lt;p&gt;함수가 실행 된 결과가 예측한 결과와 맞아 떨어지는 지를 검사하는 방식으로 테스트를 진행 한다. &lt;strong&gt;t.Fatal()&lt;/strong&gt;, &lt;strong&gt;t.Fail()&lt;/strong&gt;등을 이용해서 테스트를 제어 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FailNow()&lt;/strong&gt;이 호출되면, 테스트 함수를 즉시 종료하고 다음 테스트 함수를 실행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fatal()&lt;/strong&gt;는 로그를 출력하는 걸 제외하고 &lt;strong&gt;FailNow&lt;/strong&gt; 메서드와 같은 일을 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fail()&lt;/strong&gt;이 호출되면, 테스트가 실패하더라도 함수를 종료하지 않고 다음 코드를 계속 실행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error()&lt;/strong&gt;는 로그를 출력하는 걸 제외하고 &lt;strong&gt;Fail&lt;/strong&gt; 메서드와 같은 일을 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Errorf()&lt;/strong&gt; 형식화된 로그를 출력한다. Fila 메서드와 같은 일을 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Log()&lt;/strong&gt; 테스트 로그를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logf()&lt;/strong&gt; 형식화된 테스트 로그를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failed()&lt;/strong&gt; 실패하더라도 레포트하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;assertion&#34;&gt;Assertion&lt;/h2&gt;

&lt;p&gt;테스트 코드를 만들다 보면 if 문이 코드의 절반 이상을 차지하는 걸 보게될 것이다. 비교대상도 가지각색이라서 가독성이 떨어진다. assert 함수가 필요하다. 직접 만들어 보고 싶겠지만 그냥 잘 만들어져 있는 테스트 패키지 가져다가 쓰자. 내가 요즘 쓰고 있는 테스트 패키지는 &lt;strong&gt;github.com/stretchr/testify/assert&lt;/strong&gt;이다. 패키지를 설치 한 후 아래 코드를 테스트 했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package yours

import (
    &amp;quot;github.com/stretchr/testify/assert&amp;quot;
    &amp;quot;testing&amp;quot;
)

func TestSomething(t *testing.T) {
    // assert equality
    assert.Equal(t, 123, 125, &amp;quot;they should be equal&amp;quot;)

    // assert inequality
    assert.NotEqual(t, 123, 456, &amp;quot;they should not be equal&amp;quot;)
}
}}}
테스트를 돌려보자.
{{{#!plain
# go test
--- FAIL: TestSomething (0.00s)
        Error Trace:    yours_test.go:11
	Error:		Not equal: 123 (expected)
			        != 125 (actual)
	Messages:	they should be equal
		
FAIL
exit status 1
FAIL	_/home/yundream/workspace/golang/mytest	0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트 코드와 테스트 결과의 가독성 모두 좋아졌다. 이 패키지는 &lt;strong&gt;assert&lt;/strong&gt;외에도 &lt;strong&gt;mock&lt;/strong&gt;, &lt;strong&gt;http 테스트&lt;/strong&gt;, &lt;strong&gt;suite&lt;/strong&gt;등 테스트를 위한 다양한 툴들을 지원한다.&lt;/p&gt;

&lt;h2 id=&#34;http-핸들러-테스트&#34;&gt;HTTP 핸들러 테스트&lt;/h2&gt;

&lt;p&gt;HTTP 핸들러의 경우 웹 서버를 띄워야 하기 때문에, 메서드보다 테스트가 까다롭다. 아래의 방식으로 테스트 할 수 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;net/http/httptest&lt;/strong&gt; 패키지를 이용한 테스트. httptest를 이용하면 루프백(127.0.0.1)에 바인드 되는 서버를 띄울 수 있다. 이후 net/http에서 제공하는 클라이언트 메서드들을 이용하면 &lt;strong&gt;서버 &amp;amp; 클라이언트&lt;/strong&gt;모드에서 테스트 할 수 있다.&lt;/li&gt;
&lt;li&gt;아예 빌드하고 실행하고, HTTP 클라이언트를 이용해서 테스트 한다.
각각의 장/단점이 있다. 1의 경우 테스트 커버리지를 확인 할 수 있고, 2의 경우에는 통합된 환경에서의 테스트가 가능하다. 나는 1과 2의 방법을 모두 다 사용하고 있다. 여기에서는 &lt;strong&gt;httptest&lt;/strong&gt;를 이용한 테스트를 살펴볼 생각이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;테스트에 사용한 소스코드 트리다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.
├── handler
│   ├── handler.go
│   └── handler_test.go
└── main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;net/http, gorilla, 패키지를 이용해서 개발 했다. GET /ping에 대해서 &amp;ldquo;pong&amp;rdquo;를 리턴하는 일을 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package handler

import (
    &amp;quot;encoding/json&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/gorilla/mux&amp;quot;
    &amp;quot;net/http&amp;quot;
)

type Handler struct {
    router *mux.Router
}

func (h Handler) Init() {
    h.router = mux.NewRouter()
    h.router.HandleFunc(&amp;quot;/ping&amp;quot;, h.Ping).Methods(&amp;quot;GET&amp;quot;)
    http.Handle(&amp;quot;/&amp;quot;, h.router)
}
func (h Handler) Ping(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, &amp;quot;pong&amp;quot;)
}
func (h Handler) Calc(w http.ResponseWriter, r *http.Request) {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트 코드다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// handler_test.go
package handler

import (
    &amp;quot;github.com/gorilla/handlers&amp;quot;
    &amp;quot;github.com/stretchr/testify/assert&amp;quot;
    &amp;quot;io/ioutil&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;net/http/httptest&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;testing&amp;quot;
)

var (
    server  *httptest.Server
    testUrl string
)

type Response struct {
    Content string
    Code    int
}

func Test_Init(t *testing.T) {
    logfile, err := os.OpenFile(&amp;quot;/tmp/test.log&amp;quot;, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0755)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    h := Handler{}
    h.Init()
    server = httptest.NewServer(handlers.CombinedLoggingHandler(logfile, http.DefaultServeMux))
    testUrl = server.URL
}

func Test_Ping(t *testing.T) {
    res, err := DoGet(testUrl + &amp;quot;/ping&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, 200, res.Code, &amp;quot;PING API&amp;quot;)
    assert.Equal(t, &amp;quot;pong&amp;quot;, res.Content, &amp;quot;PONG Message&amp;quot;)
}

func DoGet(url string) (*Response, error) {
    response, err := http.Get(url)
    if err != nil {
        return nil, err
    }
    defer response.Body.Close()
    contents, err := ioutil.ReadAll(response.Body)
    if err != nil {
        return nil, err
    }
    return &amp;amp;Response{Content: string(contents), Code: response.StatusCode}, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;httptest&lt;/strong&gt;패키지는 테스트를 위해서 내장된 웹 서버를 실행한다. 따라서 핸들러 등록, 데이터베이스 연결과 같이 서비스를 위해서 필요한 자원들을 초기화 해야 한다. &lt;strong&gt;Test_init&lt;/strong&gt;메서드를 이용해서 서비스를 초기화 하고 있다. 테스트 코드에 대한 디버깅은 &lt;strong&gt;testing.T.Log&lt;/strong&gt; 계열의 메서드를 이용해서 모니터에 표준출력하는 방식으로 진행하는데, 웹 서버가 실행되는 방식이라서 로그를 표준출력 할 수 없다. 그래서 /tmp/test.log에 access log를 남기기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;httptest.NewServer&lt;/strong&gt; 메서드를 실행하면, 웹 서버가 실행된다. 웹 서버의 접근 URL은 server.URL에 저장돼 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test_Ping&lt;/strong&gt;에서 ping API를 테스트한다. 테스트는 http client를 이용한다. 200 OK와 &amp;ldquo;pong&amp;rdquo; 메시지를 검사하고 있다. 테스트결과다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test -v
=== RUN   Test_Init
--- PASS: Test_Init (0.00s)
=== RUN   Test_Ping
--- PASS: Test_Ping (0.00s)
PASS
ok  	bitbucket.org/dream_yun/handlertest/handler	0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;존재하지 않는 페이지를 요청 할 경우 &lt;strong&gt;404 Page Not Found&lt;/strong&gt;를 반환해야 할테다. 이를 테스트하기 위한 코드를 만들었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Test_APINotFound(t *testing.T) {
    res, err := DoGet(testUrl + &amp;quot;/myfunc&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, 404, res.Code, &amp;quot;Unknown API&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 테스트 시나리오에 따라서 테스트 코드를 추가하면 된다.&lt;/p&gt;

&lt;h2 id=&#34;서비스간-연동-테스트&#34;&gt;서비스간 연동 테스트&lt;/h2&gt;

&lt;p&gt;MSA 모델을 따르는 애플리케이션을 만들다 보면, 다른 (REST)애플리케이션과 통신 해야 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1VaRfN4dntpTqQb_zOZhXMXDxVa49PzXfIOR9KyPO_Co/pub?w=521&amp;amp;h=255&#34; alt=&#34;MSA에서의 REST API를 이용한 서비스 이용&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App02&lt;/strong&gt;는 서비스에서 발생한 다양한 데이터들을 관리하는 일을 한다. 유저가 업로드한 이미지, 문서 파일은 App-02로 전달된다. App-02는 이 파일들을 유저 설정에 따라서 S3, DropBox, Google Drive 등으로 전송한다.&lt;/p&gt;

&lt;p&gt;나는 App01 서비스도 유저가 입력한 연산과 그 결과를 &lt;strong&gt;App02&lt;/strong&gt;를 이용해서 저장하기로 했다. &amp;ndash; 이게 어떤 쓸모가 있는 기능인지는 묻지도 말고 따지지도 말자 &amp;ndash; &lt;strong&gt;코드의 추가와 추가된 코드에 대한 테스트&lt;/strong&gt;가 필요하다.&lt;/p&gt;

&lt;p&gt;App02를 직접 띄운다음 테스트 하는 방법도 있다. 이 방법에 따라 테스트 하려면 App02를 단순 실행하는 것이 아닌, App02가 제대로 실행 할 수 있는 환경을 만들어야 한다. 그러니까 S3, DropBox, Google Drive 등과 연동할 수 있는 환경을 &lt;strong&gt;개발 서버에 만들어야&lt;/strong&gt; 한다. 애로 사항이 꽃필 것이다. 최종 연동 테스트에서는 이렇게 해야겠지만, 개발단계에서 이렇게 하기는 쉽지 않다.&lt;/p&gt;

&lt;p&gt;나는 입력과 출력만 검사하는 &lt;strong&gt;블랙 박스 테스트&lt;/strong&gt;를 실행하기로 했다. httptest 패키지를 이용해서 &lt;strong&gt;App02 테스트 서버&lt;/strong&gt;를 만들었다. 물론 App02 테스트 서버를 만들기 위해서는 App02의 API 명세서와 App02 패키지가 필요하다. 아래는 테스트 서버 코드다. handler 디렉토리 밑에 만들었다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//  handler/app02_test_server.go
package handler

import (
    &amp;quot;bitbucket.org/dream_yun/app02&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/gorilla/handlers&amp;quot;
    &amp;quot;github.com/gorilla/mux&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;net/http/httptest&amp;quot;
    &amp;quot;os&amp;quot;
)

type TestApiServer struct {
    router *mux.Router
}

// 실행 후 테스트 서버의 URL을 반환한다.
func (api *TestApiServer) Run() string {

    api.router = mux.NewRouter()
    api.router.HandleFunc(&amp;quot;/save/{serviceName}&amp;quot;, api.Save).Methods(&amp;quot;POST&amp;quot;)
    api.router.HandleFunc(&amp;quot;/save/{serviceName}/{fileName}&amp;quot;, api.ReadFile).Methods(&amp;quot;GET&amp;quot;)

    logfile, _ := os.OpenFile(&amp;quot;/tmp/app02_test.log&amp;quot;, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)
    server := httptest.NewServer(handlers.CombinedLoggingHandler(logfile, api.router))
    return server.URL
}

// Save API다. 여기에 여러가지 테스트 조건들을 코딩하면 된다. 
func (api TestApiServer) Save(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    serviceName := vars[&amp;quot;serviceName&amp;quot;]
    if serviceName != &amp;quot;calc&amp;quot; {
        w.WriteHeader(http.StatusBadRequest)
        return
    }
    fmt.Fprintf(w, app02.ServiceOK)
}

// 저장된 파일을 가져온다.
func (api TestApiServer) ReadFile(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    serviceName := vars[&amp;quot;serviceName&amp;quot;]
    fileName := vars[&amp;quot;fileName&amp;quot;]
    if serviceName != &amp;quot;calc&amp;quot; {
        w.WriteHeader(http.StatusBadRequest)
        return
    }

    if fileName == &amp;quot;my.jpg&amp;quot; {
        fmt.Fprintf(w, app02.ServiceOK)
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;연산을 끝낸 후에 Save API를 호출하도록 Div 메서드를 수정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Handler struct {
    router     *mux.Router
    fileServer string
}

func (h Handler) Init(fileServer string) {
    h.router = mux.NewRouter()
    h.fileServer = fileServer
    h.router.HandleFunc(&amp;quot;/ping&amp;quot;, h.Ping).Methods(&amp;quot;GET&amp;quot;)
    h.router.HandleFunc(&amp;quot;/div/{a}/{b}&amp;quot;, h.Div).Methods(&amp;quot;GET&amp;quot;)
    http.Handle(&amp;quot;/&amp;quot;, h.router)
}

func (h Handler) Div(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    a := vars[&amp;quot;a&amp;quot;]
    b := vars[&amp;quot;b&amp;quot;]

    ai, err := strconv.Atoi(a)
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        return
    }
    bi, err := strconv.Atoi(b)
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        return
    }

    if bi == 0 {
        w.WriteHeader(http.StatusNotAcceptable)
        return
    }
    if ai == 0 { 
        w.WriteHeader(http.StatusNotAcceptable)
        return
    }
    
    DoPost(h.fileServer+&amp;quot;/save/calc&amp;quot;, &amp;quot;a/b&amp;quot;)
    fmt.Fprintf(w, &amp;quot;%d&amp;quot;, ai/bi)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Handler 구조체에 fileServer 변수를 추가했다. 여기에는 app02 서버의 주소가 저장된다.&lt;/li&gt;
&lt;li&gt;매개변수로 app02 서버를 받도록 Handler.Init() 메서드를 수정했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Test 코드도 수정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Test_Init(t *testing.T) {
    logfile, err := os.OpenFile(&amp;quot;/tmp/test.log&amp;quot;, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0755)
    assert.Nil(t, err, &amp;quot;&amp;quot;)

    FileServer := TestApiServer{}
    fileServerAddr := FileServer.Run()
    h := Handler{}
    h.Init(fileServerAddr)
    server = httptest.NewServer(handlers.CombinedLoggingHandler(logfile, http.DefaultServeMux))
    testUrl = server.URL
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TestApiServer의 바인드 주소를 읽어서 Handler.Init() 메서드에 넘기도록 테스트 코드를 수정했다. 이제 테스트를 실행하면 TestAPIServer가 실행되고, Div 메서드가 TestAPIServer의 save api를 호출하는 것을 볼 수 있을 거다.&lt;/p&gt;

&lt;p&gt;이 테스트는 완전하지 않다. Div의 DoPost 호출 부분을 충분히 테스트하지 않았기 때문이다. 테스트 커버리지를 높이려면, DoPost를 호출하는 별도의 메서드를 만들어서 메서드의 입/출력을 테스트 할 수 있도록 해야 한다.&lt;/p&gt;

&lt;p&gt;여기에서 중요한 점은 &lt;strong&gt;테스트를 쉽게 하기 위해서 메서드들을 수정&lt;/strong&gt;했다는 점이다. TDD에서는 코드에 맞는 테스트를 하는게 아니고, 테스트에 맞는 코드를 만든다.&lt;/p&gt;

&lt;h2 id=&#34;목업-vs-직접-구성&#34;&gt;목업 vs 직접 구성&lt;/h2&gt;

&lt;p&gt;예제로 삼았던 ping API 서버는 외부 소프트웨어의 도움 없이 작동한다. 하지만 현실에서 이런 코드를 찾기는 어렵다. 마이에스큐엘(Mysql), 몽고디비(Mongodb), 주키퍼(zookeeper), 레디스(Redis) 등 수많은 다른 애플리케이션들과 통신을 한다. 어떻게 테스트 해야 할까.&lt;/p&gt;

&lt;p&gt;연동 애플리케이션과 서버를 모두 구축해서 테스트 하는 방법이 있다. 마이에스큐엘, 몽고디비, 레디스.. 등등을 모두 설치해서 테스트 하는 거다. 이 방법의 단점은 상당히 귀찮다는 것이다. 혼자 하는 개발하는 하고 있다면 좀 귀찮아도 해볼만 하지만, 여럿이 개발한다면 애로사항이 꽃필 것이다. 이외에도 데이터베이스 오류 상황에서, 소프트웨어가 어떻게 작동할지를 테스트하기가 쉽지 않다는 것도 문제다.&lt;/p&gt;

&lt;p&gt;이 문제는 &lt;strong&gt;mocks/stubs&lt;/strong&gt;으로 모의 객체를 만들어서 테스트하는 것으로 테스트 커버리지는 늘리면서도 테스트 시간을 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;결론부터 말하자면 난 목업을 이용하지 않고 있다. 작동하는 소프트웨어들과 직접 연동해서 테스트 한다. 개발/테스트 환경 구축의 번거로움은.. 글쎄 나는 (데이터베이스를 설치하고 설정하는) 정도의 번거로움은 감수해야 하고, 감수한 만큼 개발자에게 이득이 있다고 생각하는 입장이다. 그리고 세상이 좋아졌다. VM, Container, Vagrant 등을 이용하면 개발환경을 손쉽게 구성하고 배포, 공유 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;테스트-커버리지&#34;&gt;테스트 커버리지&lt;/h2&gt;

&lt;p&gt;테스트에 대한 품질은 테스트 커버리지로 측정 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go test -cover
PASS
coverage: 100.0% of statements
ok  	bitbucket.org/dream_yun/handlertest/handler	0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;모든 코드를 완전히 테스트 하고 있다. 이 예제로는 테스트 커버리지를 확인하기가 애매모호해서, API를 추가했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// package handler
func (h Handler) Div(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(request)
    a := vars[&amp;quot;a&amp;quot;]
    b := vars[&amp;quot;b&amp;quot;]

    if b == 0 {
        w.WriteHeader(http.StatusNotAcceptable)
        return
    }
    if a == 0 {
        w.WriteHeader(http.StatusNotAcceptable)
        return
    }
    ia, err := strconv.Atoi(a)
    ib, err := strconv.Atoi(b)
    fmt.Fprint(w)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;지금은 코드를 먼저 만들었지만 TDD의 원칙을 정확히 따르려면, 테스트 코드를 먼저 만들고 나서 코드를 만들어야 할 것이다. 다만 MSA의 경우에는 API단위로 하는 일이 특정되기 때문에, 코드를 먼저 만들고 테스트 코드를 만드는 것도 괜찮은 방법이라고 생각한다. &lt;strong&gt;TDD를 위한 TDD&lt;/strong&gt;가 문제다라는 주장이 나오는 이유를 생각해보자. 완전한 방법, 완전한 툴은 없다. 자신의 역량과 환경에 적절하게 응용해서 사용해야 한다.&lt;/p&gt;

&lt;p&gt;유닛 테스트를 돌려보자. 테스트 커버리지가 떨어진 걸 확인 할 수 있을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go test -cover
PASS
coverage: 21.7% of statements
ok  	bitbucket.org/dream_yun/handlertest/handler	0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Div 메서드에 대한 테스트 코드를 만들어서 커버리지를 올리기로 했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Test_Div(t *testing.T) {
    res, err := DoGet(testUrl + &amp;quot;/div/4/2&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, http.StatusOK, res.Code)
    assert.Equal(t, &amp;quot;2&amp;quot;, res.Content)
    
    res, err = DoGet(testUrl + &amp;quot;/div/4/a&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, http.StatusInternalServerError, res.Code, &amp;quot;Invalide argument&amp;quot;)
    
    res, err = DoGet(testUrl + &amp;quot;/div/0/4&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, http.StatusNotAcceptable, res.Code, &amp;quot;Invalide argument&amp;quot;)
    
    res, err = DoGet(testUrl + &amp;quot;/div/4/0&amp;quot;)
    assert.Nil(t, err, &amp;quot;&amp;quot;)
    assert.Equal(t, http.StatusNotAcceptable, res.Code, &amp;quot;Invalide argument&amp;quot;)
}   
```go
```sh
# go test -cover
PASS
coverage: 91.3% of statements
ok  	bitbucket.org/dream_yun/handlertest/handler	0.005s
}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;테스트 커버리지는 &amp;ldquo;이 소프트웨어는 적어도 이 정도의 코드 영역에 대해서 테스트 하고 있다&amp;rdquo;는 것을 알려준다. 특히 코드에 대한 리펙토링이나 기능 추가시 필요한 품질을 측정하는데 매우 좋은 자료가 된다. 예를 들어 현재 릴리즈된 소프트웨어의 커버리지가 90%일 경우, 수정된 코드의 커버리지를 90%로 맞춘다면 적어도 이전에 테스트했던 내용들은 모두 테스트 했으며, 이전 수준에서의 품질을 유지 하고 있다고 예상 할 수 있을 것 이다.&lt;/p&gt;

&lt;p&gt;스타트업의 경우 서비스의 품질보다 출시 시기가 중요한 경우가 많다. 이 경우 소위 &lt;strong&gt;기술부채&lt;/strong&gt;라는 명목으로 품질을 희생하는 경우가 많은데,  나중에 기술부채를 제거하기 위해서 엄청난 시간과 노력을 투입해야 할 수 있다. 개발 환경을 갖추지 못한 상태에서 급하게 기술부채를 제거 할 경우 곤욕을 치를 수 있고, 서비스의 발목을 잡을 수도 있다.&lt;/p&gt;

&lt;p&gt;테스트 코드는 리펙토링과 설계변경을 쉽게 할 수 있도록 도와준다. 테스트 커버리지를 관리하는 것으로 일관성 있는 품질을 달성 할 수 있다. 유닛 테스트를 이용해서 기술 부채를 관리 할 수 있다.&lt;/p&gt;

&lt;p&gt;테스트 커버리지의 목표를 90%로 잡았다고 가정해 보자. 91.3 % 이니 이 정도면 충분하다고 생각 할 수 있겠으나 그렇지 않다. &lt;strong&gt;서비스의 보안수준은 가장 약한 보안 고리에 의해서 결정된다.&lt;/strong&gt; 서비스 품질 역시 마찬가지로 가장 약한 고리가 서비스의 전체 품질을 결정 한다. 따라서 테스트 하지 않은 부분이 서비스에 중요한 영향을 미칠 수 있는 지 점검 해야 한다. 위의 정보로는 어느 부분이 테스트가 안됐는지를 확인 할 수 없다.&lt;/p&gt;

&lt;p&gt;테스트 커버리지 레포트를 만들어 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test -coverprofile=coverage.out 
# go tool cover -html=coverage.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-coverprofile&lt;/strong&gt; 옵션을 이용하면 테스트한 코드 영역에 대한 레포트가 만들어진다. 일반 텍스트 파일인데, &lt;strong&gt;tool cover&lt;/strong&gt; 명령을 이용해서 html 파일로 변환 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryudmq.by3302.livefilestore.com/y3mJYLhYTZWyMa4UE1wfN3H-D-RKFA6M7rnil_bUWKMDXdP86xNzJ77MkFXFGN32oS68Pjw5yDOVed1st1toTzjOtip0WaCuWJhEhT5pN8B7b3s3YVrUT9T2ixkHFWHBpM8IgHKykDGGRg5bo_7KA5p-8Ju9AGn4AX4vE0T8xv3vME?width=660&amp;amp;height=432&amp;amp;cropmode=none&#34; alt=&#34;go cover html 화면&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;strconv.Atoi()&lt;/strong&gt; 메서드에 대한 테스트가 빠져있음을 알 수 있다. 이에 대해서  &amp;ldquo;Div API는 클라이언트가 숫자(0-9)가 아닌 다른 값을 보낼 수도 있으므로, 에러 체크가 필요하다. 그리고 변수 a, b에 대한 타당성(숫자인지, int64 범위의 값인지 등)을 검사하는 코드도 추가해야 한다&amp;rdquo;라는 평가를 할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&#34;gocov&#34;&gt;gocov&lt;/h2&gt;

&lt;p&gt;go에서 제공하는 기본 툴도 쓸만하긴 하지만, 레포팅 기능이 썩 맘에 들지 않는다. 그래서 &lt;strong&gt;gocov&lt;/strong&gt;라는 툴을 이용해서 레포트를 만들기로 했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/axw/gocov/gocov
# go get github.com/matm/gocov-html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;gocov test&lt;/strong&gt;를 이용해서 커버리지 데이터파일을 만든다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# gocov test ./ &amp;gt; handler.json
ok  	bitbucket.org/dream_yun/handlertest/handler	0.005s	coverage: 91.3% of statements
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handler.json을 html 파일로 변환한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# gocov-html handler.json &amp;gt; handler.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;브라우저로 읽어보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryscvq.by3302.livefilestore.com/y3miXS8j97x5BezCReIZYH2BNOnlXESm33jhcUAzj_wBD2JzF_k12xyAOv0aKwUj1EhFHkdVZ4bDYFR9Jgvk3TxacSU-W-TU0Xg2MUm1C_i4F-rtt0OqVQr2aDwtRToqAXndvtyN8u6aQHEN8DWVFneg32NSTz71iH8RhcDyMmmqZU?width=660&amp;amp;height=477&amp;amp;cropmode=none&#34; alt=&#34;gocov 이미지 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://rytnsa.by3302.livefilestore.com/y3mdq3P4WAWJGSzJnwg1NuQ0Ck4zue-ttulK2zZ2fPppUVuAe-AMqOLrWK4YVUXoFbQ_rQxH3kL1LEJgSFH8MZP68u57aqPCnxJ3AY9AATwCjtCHHBDc_fV3n6BgAZy_SdNCC57KNiavbNIMchRgDbi0_CbpZYrCMso5989qPFUJSU?width=660&amp;amp;height=477&amp;amp;cropmode=none&#34; alt=&#34;gocov 이미지 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;훨씬 보기 좋아졌다.&lt;/p&gt;

&lt;h2 id=&#34;젠킨스와의-통합&#34;&gt;젠킨스와의 통합&lt;/h2&gt;

&lt;p&gt;이미 젠킨스를 통해서 테스트를 자동화 하고 있다. 여기에 레포트만 추가하면 된다.&lt;/p&gt;

&lt;p&gt;젠킨스에 웹 서버를 설치하고 gocov test, gocov-html 과정에서 나온 html 결과물을 웹 서버 디렉토리에 저장해서 레포팅 하는 방법도 있다. 하지만 레포팅 결과물이 젠킨스 대시보드와 분리된다는 점이 썩 맘에 들지 않는다. 그리고 gocov-html은 &lt;strong&gt;현재 상태&lt;/strong&gt;만 보여준다는 문제가 있다. 테스트 결과를 평가 하기 위해서는 이전 테스트 결과도 함께 볼 수 있어야 한다. 그래서 젠킨스의 코드 테스트 커버리지 레포팅 플러그인인 &lt;a href=&#34;http://cobertura.github.io/cobertura&#34;&gt;Cobertura&lt;/a&gt;를 사용하기로 했다. Cobertura는 자바코드의 커버리지를 측정하기 위해서 만들어진 툴이지만 XML 포멧만 맞춘다면 다른 언어에도 문제없이 사용 할 수 있다.&lt;/p&gt;

&lt;p&gt;gocov의 결과를 xml로 출력하기 위해서 gocov-xml을 설치했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/AlekSi/gocov-xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래와 같이 테스트커버리지 결과를 xml 문서로 출력할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# gocov test ./ | gocov-xml &amp;gt; coverage.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;젠킨스에 cobertura 플러그인을 설치하는 과정은 &lt;a href=&#34;http://www.joinc.co.kr/w/man/12/jenkins&#34;&gt;Go언어와 Jenkins&lt;/a&gt;문서를 참고하자. 아래는 적용 결과다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://marcelog.github.io/articles/cobertura_example_covertool.png&#34; alt=&#34;coberatura 레포팅&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tdd-통합-프로세스&#34;&gt;TDD 통합 프로세스&lt;/h2&gt;

&lt;p&gt;MSA 모델을 따르는 소프트웨어의 개발에서 배포 단계까지의 테스트 방식을 정리해 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/18iqVYcMa8_en8Ro2OjwhnTIujD7cdPCPwxtoNNtNHy0/pub?w=882&amp;amp;h=469&#34; alt=&#34;TDD 통합 프로세스&#34; /&gt;&lt;/p&gt;

&lt;p&gt;개발 단계에서는 &lt;strong&gt;화이트 박스 테스트&lt;/strong&gt;와 &lt;strong&gt;블랙 박스 테스트&lt;/strong&gt;를 함께 사용한다. 직접 제어하고 테스트 할 수 있는 코드들은 화이트 박스 테스트의 대상이다. 애플리케이션을 구성하고 있는 핸들러와 핸들러에서 호출하는 메서드들이다.&lt;/p&gt;

&lt;p&gt;다른 애플리케이션과 (REST API로) 연결된 코드의 경우에는 블랙 박스 테스트를 진행한다. 해당 애플리케이션 개발자로 부터 API 규격을 받아서, 입력과 출력을 테스트 하는 방식이다. &lt;strong&gt;httptesting&lt;/strong&gt;을 이용해서 블랙 박스 테스트를 위한 웹 서버를 띄우면 된다. 입력과 출력의 사양은 연동 애플리케이션의 패키지를 그대로 사용할테니, 문서의 내용과 코드가 맞지 않는다고 해도 문제될게 없다. 그냥 패키지를 참고해서 개발해도 된다. 연동 애플리케이션의 규격이 변경될 경우 테스트에러가 떨어질테니 개발단계에서 문제를 해결 할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;통합 단계에서는 연동 테스트까지 진행한다. 최신 버전의 애플리케이션을 실행 하고, 직접 API를 전송해서 테스트 하는 방식이다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>