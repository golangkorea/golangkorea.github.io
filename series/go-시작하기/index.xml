<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go 시작하기 on Golang Korean Community</title>
    <link>https://golangkorea.github.io/series/go-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
    <description>Recent content in Go 시작하기 on Golang Korean Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Oct 2016 00:51:06 +0900</lastBuildDate>
    <atom:link href="https://golangkorea.github.io/series/go-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go와 객체지향</title>
      <link>https://golangkorea.github.io/post/go-start/object-oriented/</link>
      <pubDate>Sun, 02 Oct 2016 00:51:06 +0900</pubDate>
      
      <guid>https://golangkorea.github.io/post/go-start/object-oriented/</guid>
      <description>

&lt;h2 id=&#34;객체지향-프로그래밍&#34;&gt;객체지향 프로그래밍&lt;/h2&gt;

&lt;p&gt;Go는 클래스(Class)가 없다!! Struct가 Class의 역할을 수행 할 수 있기는 하지만 메서드도 구조체로부터 분리되는 구성을 가지고 있다. 단일 상속도 없고 당연히 다중 상속도 없다. 왠지 객체지향스럽지 않은 언어로 보일 수 있겠지만 &lt;strong&gt;충분히 객체지향적&lt;/strong&gt;이다. 그냥 좀 다른 방법으로 객체를 지향하고 있을 따름이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;struct가 클래스를 대신한다. 다른 OOP에서의 클래스와는 달리 non-virtual(real) 메서드로만 구성된다.&lt;/li&gt;
&lt;li&gt;receiver로 구조체와 함수를 연결 해서 메서드를 구현한다.&lt;/li&gt;
&lt;li&gt;네임스페이스(namespacing)는 exports로 대신한다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;인터페이스(interfaces)로 다형성을 구현할 수 있다. 다른 OOP에서는 필드 없이, virtual 메서드로만 구성된 클래스 형태로 구현된다.&lt;/li&gt;
&lt;li&gt;embedding으로 상속을 대신한다. 객체지향의 composition 모델과 비슷하다.
Go 언어를 이용한 객체지향 프로그래밍 기술에 대해서 살펴보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;struct-구조체-와-메서드&#34;&gt;struct(구조체)와 메서드&lt;/h2&gt;

&lt;p&gt;Go언어는 struct가 class 키워드를 대신한다. class와의 눈에 보이는 차이점은 real 타입(non-virtual)의 메서드만 올 수 있다는 점이다. Area 메서드를 가지는 &lt;strong&gt;Rectangle&lt;/strong&gt; 구조체는 아래와 같이 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Rectangle struct {
    Name    string
    Width, Height float64
}

func (r Rectangle) Area() float64 {
    return r.Width * r.Height
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class 키워드를 가지고 있는 객체지향 언어의 경우 아래와 같은 의사코드로 표현할 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Rectangle
   field Name: string
   field Width: float64
   field Height: float64
   method Area() 
       return this.Width * this.Height
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go는 구조체 내에 메서드를 포함 할 수 없다. 구조체 바깥에 만들어지며, &lt;strong&gt;리시버(receiver)&lt;/strong&gt;를 이용해서 어느 구조체의 메서드인지를 정의 할 수 있다. 아래 그럼은 리시버를 이용해서 구조체와 함수가 연결되는 과정을 묘사하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1rBOgYujGOIy9EL6U040nCSCC61pwzFe-BhoWNkVoksU/pub?w=756&amp;amp;h=205&#34; alt=&#34;receiver&#34; /&gt;&lt;/p&gt;

&lt;p&gt;리시버는 &lt;strong&gt;&lt;em&gt;Value 리시버&lt;/em&gt;&lt;/strong&gt;와 &lt;strong&gt;&lt;em&gt;포인터 리시버&lt;/em&gt;&lt;/strong&gt; 두 가지 타입이 있다. 아래 코드를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Mutatable struct {
    a int
    b int
}

func (m Mutatable) StayTheSame() {
    m.a = 5
    m.b = 7
}

func (m *Mutatable) Mutate() {
    m.a = 5
    m.b = 7
}

func main() {
    m := &amp;amp;Mutatable{0, 0}
    fmt.Println(m)
    m.StayTheSame()
    fmt.Println(m)
    m.Mutate()
    fmt.Println(m)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/RY6m5sE2H-&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StayTheSame&lt;/strong&gt;은 Value 리시버이고 &lt;strong&gt;Mutate&lt;/strong&gt;는 포인터 리시버다. 포인터 리시버의 경우 구조체의 필드 값을 변경(Mutate)하는 반면 Value 리시버는 스트럭처의 값을 변경하지 않는다. Mutate 하느냐 하지 않느냐가 Value 리시버와 포인터 리시버의 눈에 보이는 차이다. 포인터라는게 데이터가 저장된 주소를 가리킨다는 것을 생각해보면, 포인터 리시버의 &lt;strong&gt;Mutate&lt;/strong&gt; 한 성질을 유추 할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;이제 구조체로 부터 객체를 만들어 보자. 몇 가지 방법이 있는데, 첫 번째 방법은 패키지에 객체를 반환하는 &lt;strong&gt;New&lt;/strong&gt; 같은 함수를 만드는 것이다. &lt;strong&gt;빌더 패턴(builder pattern)&lt;/strong&gt;의 응용이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Rectangle struct {
    Name          string
    Width, Height float64
}

// Rectangle 를 반환하는 함수를 만들었다.
func New(name string) *Rectangle {
    return &amp;amp;Rectangle{Name: name}
}

func (r Rectangle) Area() float64 {
    return r.Width * r.Height
}

func (r *Rectangle) SetWidth(width float64) {
    r.Width = width
}
func (r *Rectangle) SetHeight(height float64) {
    r.Height = height
}

func main() {
    myRectangle := New(&amp;quot;Rect-A&amp;quot;)
    // 출력 : 0
    fmt.Println(myRectangle.Area())

    myRectangle.SetWidth(52.2)
    myRectangle.SetHeight(30.3)

    // 출력 : 1581.66
    fmt.Println(myRectangle.Area())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/xPeyGF7wIc&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New() 함수를 실행해서 Rectangle 객체를 만들었다.&lt;/p&gt;

&lt;p&gt;두 번째로 구조체의 초기화 문법을 이용해서 직접 객체를 만드는 방법이 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    yourRectangle := Rectangle{}
    myRectangle := Rectangle{Name:&amp;quot;Rect-A&amp;quot;, Width:12.5, Height:13.5}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;구조체 초기화 문법을 이용 하면, 필드의 값을 초기화 할 수 있다. 초기화 하지 않는 필드들은 &lt;strong&gt;기본 값(zero-value)&lt;/strong&gt;으로 초기화 된다. float64는 0, string은 &amp;ldquo;&amp;rdquo;, 포인터는 nil로 초기화 된다. 예를 들어서 위 코드의 yourRectangle의 경우 Height와 Width가 0으로 초기화 되기 때문에 yourRectangle.Area()는 0을 반환 할 것이다.&lt;/p&gt;

&lt;p&gt;마지막으로 Go의 new()내장 함수를 이용하는 방법이 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func new(Type) *Type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;new 함수를 호출하고 나면, 메모리를 할당하고 포인터를 반환한다. 필드의 값들은 기본 값으로 초기화 된다. c++의 new와 사용방법이 비슷하다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    myRectangle := new(Rectangle)
    // 출력 : 0
    fmt.Println(myRectangle.Area())

    myRectangle.SetWidth(52.2)
    myRectangle.SetHeight(30.3)

    // 출력 : 1581.66
    fmt.Println(myRectangle.Area())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go 언어는 생성자가 없다. 하지만 팩토리 패턴(factory pattern)을 이용해서 구현 할 수 있다. 예제에서 다루었던 &lt;strong&gt;New()&lt;/strong&gt;함수가 팩토리 패턴을 이용하고 있다. 아래와 같이 수정해서 생성자를 구현했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Rectangle struct {
    Name          string
    Width, Height float64
}

// 팩토리 패턴을 이용 생성자를 구현했다.
func New(name string, width float64, height float64) *Rectangle {
    return &amp;amp;Rectangle{Name: name, Width: width, Height: height}
}

func (r Rectangle) Area() float64 {
    return r.Width * r.Height
}

func (r *Rectangle) SetWidth(width float64) {
    r.Width = width
}
func (r *Rectangle) SetHeight(height float64) {
    r.Height = height
}

func main() {
    myRectangle := New(&amp;quot;Rect-A&amp;quot;, 12.3, 10.9)

    fmt.Println(myRectangle.Area())

    myRectangle.SetWidth(52.2)
    myRectangle.SetHeight(30.3)

    fmt.Println(myRectangle.Area())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/h1DrKbzEUE&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;혹은 &lt;strong&gt;Rectangle{Width:11, Height:12}&lt;/strong&gt;와 같은 초기화 문법을 이용하면 된다.&lt;/p&gt;

&lt;h2 id=&#34;exports&#34;&gt;Exports&lt;/h2&gt;

&lt;p&gt;Go언어는 패키지로 네임스페이스를 구현하고 있다. 그리고 대문자로 시작하는지에 따라서 export 여부가 결정된다. 소문자로 시작할 경우 패키지 안에서만 사용 할 수 있고, 대문자로 사용 할 경우 패키지 바깥에서 사용 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Part struct {
    name        string
    description string
    needsSpare  bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 아래와 같이 export setter과 getter 메서드를 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (p Part)Name string {
    return part.name
}

func (part *Part) SetName(name string) {
    part.name = name
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 대/소문자만으로 public 메서드와 private(internal 필드 혹은 메서드)를 결정 할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;상속-inheritance-과-composition&#34;&gt;상속(Inheritance)과 composition&lt;/h2&gt;

&lt;p&gt;객체지향 디자인은 클래스 간의 관계를 구성하는 것에서 시작한다. 클래스간의 관계는 &lt;strong&gt;상속(Inheritance)&lt;/strong&gt;과 &lt;strong&gt;컴포지션(composition)&lt;/strong&gt; 두 가지 방법으로 구성 할 수 있다.&lt;/p&gt;

&lt;p&gt;상속은 아래 처럼 묘사 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1AZ2UiAJt44aWogpg6th_v3u0C0CeOK7g2Pofi1iWBQ8/pub?w=631&amp;amp;h=420&#34; alt=&#34;OOP에서의 상속&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이 그림은 &lt;strong&gt;원형 클래스의 특징을 물려 받은 하위 원형 클래스를 만들 겠다&lt;/strong&gt;라는 의미를 내포하고 있다. 이때 상위 클래스를 부모 클래스, 하위 클래스를 자식 클래스라고 부른다. 이렇게 &lt;strong&gt;계층적(hierarchy)&lt;/strong&gt;으로 클래스 간에 관계를 구성하는 방법은 다른 분야에서도 널리 사용한다. 생물학 시간에 배웠을 &lt;strong&gt;종 &amp;gt; 속 &amp;gt; 과 &amp;gt; 목 &amp;gt; 강 &amp;gt; 문 &amp;gt; 계&lt;/strong&gt;가 전형적인 형태다.&lt;/p&gt;

&lt;p&gt;컴포지션은 부모클래스를 호출해서 포함 하는, 즉 &lt;strong&gt;embedding&lt;/strong&gt;하는 방식으로 클래스 관계를 구성한다. 다중 상속의 경우 composition 모델은 두 개 이상의 부모 클래스를 embedding 하면 된다. 상속은 &lt;strong&gt;IS - A Relationship&lt;/strong&gt;, 컴포지션은 &lt;strong&gt;Has a Relationship&lt;/strong&gt; 으로 그 관계를 묘사 할 수 있다. 아래 그림은 composition 모델을 그리고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1xorVqrumZRT-EqCbW5cdBiD0Lj0yyZkp8sPGh3JeVEw/pub?w=631&amp;amp;h=420&#34; alt=&#34;Has a relicationship&#34; /&gt;&lt;/p&gt;

&lt;p&gt;MountainBike, RoadBike, TandemBike가 Bicycle 스크럭처를 embedding 하는 방식으로 클래스 관계를 구성한 코드다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Bicycle struct {
}

func (b Bicycle) Spare() {
    fmt.Println(&amp;quot;Bicycle&#39;s Spare&amp;quot;)
}

func (b Bicycle) Run() {
    fmt.Println(&amp;quot;Bicycle Run&amp;quot;)
}

type MountainBike struct {
    Bicycle
}

func (m MountainBike) Run() {
    fmt.Println(&amp;quot;Mountain Bicycle Run&amp;quot;)
}
func (m MountainBike) Jump() {
    fmt.Println(&amp;quot;Mountain Bicycle Jump&amp;quot;)
}

type RoadBike struct {
    Bicycle
}

func main() {
    rBike := RoadBike{}
    rBike.Run()
    mBike := MountainBike{}
    mBike.Run()
    mBike.Jump()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/A5K7RfPQyS&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MountainBike 구조체와 RoadBike 구조체에 Bicycle 구조체를 &lt;strong&gt;embeded&lt;/strong&gt; 했다. Bicycle 구조체의 메서드들을 마치 자신의 메서드인 것처럼 사용 할 수 있으며, &lt;strong&gt;오버라이딩&lt;/strong&gt;도 할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 Multiple embedding을 이용해서 다중 상속을 구현해 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Phone struct {
    Model string
}

func (p Phone) Call(num string) {
    fmt.Println(&amp;quot;Ring Ring....&amp;quot;, num)
}

type Camera struct {
    Model string
}

func (p Camera) TakePicture() {
    fmt.Println(&amp;quot;Click ....&amp;quot;)
}

type SmartPhone struct {
    Phone
    Camera
}

func main() {
    myPhone := SmartPhone{}
    myPhone.TakePicture()
    myPhone.Call(&amp;quot;101-1111-2222&amp;quot;)
    fmt.Println(&amp;quot;=================&amp;quot;)
    yourPhone := SmartPhone{}
    yourPhone.Call(&amp;quot;201-2222-1111&amp;quot;)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Camera와 Phone의 기능을 가진(상속받은) SmartPhone 구조체를 만들었다. 그냥 embeded 한 것으로 상속의 주요 기능들을 구현했다. 이제 코드를 약간 수정해서 Phone과 Camera에 모델명을 설정해 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    myPhone := SmartPhone{
        Phone: Phone{Model: &amp;quot;ioph-0001&amp;quot;},
        Camera: Camera{Model: &amp;quot;huca-0002&amp;quot;},
    }
    fmt.Println(myPhone.Model)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행하면 &amp;ldquo;ambiguous selector myPhone.Model&amp;rdquo;에러가 출력된다. 어느 구조체의 Model을 선택해야 할지 모호(ambiguous)해서 생기는 문제다. 셀렉터(selector)를 설정하면 된다. SmartPhone.Model 까지 추가한 완전한 예제다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Phone struct {
    Model string
}

func (p Phone) Call(num string) {
    fmt.Println(&amp;quot;Ring Ring....&amp;quot;, num)
}

type Camera struct {
    Model string
}

func (p Camera) TakePicture() {
    fmt.Println(&amp;quot;Click ....&amp;quot;)
}

type SmartPhone struct {
    Model string
    Phone
    Camera
}

func main() {
    myPhone := SmartPhone{
        Model:  &amp;quot;Android-007&amp;quot;,
        Phone:  Phone{Model: &amp;quot;ioph-0001&amp;quot;},
        Camera: Camera{Model: &amp;quot;huca-0002&amp;quot;},
    }
    fmt.Println(myPhone.Model)
    fmt.Println(myPhone.Phone.Model)
    fmt.Println(myPhone.Camera.Model)

    yourPhone := SmartPhone{
        Model:  &amp;quot;iphone-8&amp;quot;,
        Phone:  Phone{Model: &amp;quot;Lxg-0001&amp;quot;},
        Camera: Camera{Model: &amp;quot;Apppll-0002&amp;quot;},
    }
    fmt.Println(yourPhone.Model)
    fmt.Println(yourPhone.Phone.Model)
    fmt.Println(yourPhone.Camera.Model)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/NJEhR5cFC5&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;다중-상속과-다이아몬드-문제&#34;&gt;다중 상속과 다이아몬드 문제&lt;/h2&gt;

&lt;p&gt;다중 상속은 직관적이고 사용하기 편하지만 &lt;strong&gt;죽음의 다이아몬드&lt;/strong&gt;라는 골치아픈 문제가 있기 때문에, 별로 권장하지 않는다. 아래 그림을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1p8IlZrB_xPgfdm-ilM_rU_Vn3CHp2MMspNTk-RE-5e4/pub?w=457&amp;amp;h=464&#34; alt=&#34;죽음의 다이아몬드&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Animal로 부터 Tiger과 Lion 클래스가 파생됐다. 그리고 다중 상속을 이용해서 Tiger과 Lion으로 부터 파생된 Liger 클래스가 있다. Liger 객체에서 getWeight()를 호출 할 경우 어느 클래스의 getWeight()를 호출해야 할지 모호 하므로 컴파일 실패한다.&lt;/p&gt;

&lt;p&gt;Go언어는 selector를 이용해서 네임스페이스를 설정하는 것으로 문제를 피해갈 수 있다. 아래 예제를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Animal struct {
}

func (a Animal) GetGene() {
    fmt.Println(&amp;quot;동물 유전자&amp;quot;)
}

type Tiger struct {
    Animal
}

func (t Tiger) GetGene() {
    fmt.Println(&amp;quot;호랑이 유전자&amp;quot;)
}

type Lion struct {
    Animal
}

func (l Lion) GetGene() {
    fmt.Println(&amp;quot;사자 유전자&amp;quot;)
}

type Liger struct {
    Tiger
    Lion
}

func main() {
    fmt.Println(&amp;quot;유전자 정보&amp;quot;)
    myLiger := Liger{}
    myLiger.Tiger.GetGene()
    myLiger.Lion.GetGene()
    myLiger.Lion.Animal.GetGene()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/tpXfrM8-cw&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;셀렉터를 이용 해서 모호함을 없애고 있다.&lt;/p&gt;

&lt;h2 id=&#34;structs와-interface&#34;&gt;Structs와 Interface&lt;/h2&gt;

&lt;p&gt;Go의 구조체는 non-virtual 메서드만 가질 수 없다. 가상 메서드(virtual method)를 만들려면 &lt;strong&gt;interface&lt;/strong&gt;를 이용해야 한다. Go에서 interface는 오로지  가상 메서드로만 구성 할 수 있다. Go interface의 특징이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;interface는 하나의 타입으로 변수(var)와 매개변수(parameter)로 쓸 수 있다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;interface의 구현은 concret class(struct)에서 이루어진다. concret class는 구상 클래스라고 번역한다.&lt;/li&gt;
&lt;li&gt;interface는 다른 interface에 상속(embed)할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인터페이스 응용 예제 코드를 만들어 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/1jsBTAaIeUs9jxoa8jOdX0fL3CjIm_8ElmSLJ3eUU3nk/pub?w=378&amp;amp;h=281&#34; alt=&#34;인터페이스 예제&#34; /&gt;&lt;/p&gt;

&lt;p&gt;나는 범용 위키애플리케이션을 만들려고 한다. 이 애플리케이션은 MediaWiki의 문법뿐만 아니라 마크다운(MarkDown) 문법도 처리를 할 수 있어야 한다. 필요 할 경우 모니위키(Moniwiki) 등 다른 위키 문법들까지 처리 할 수 있게 만들려고 한다. 플러그인 방식으로 확장을 하게 될테다.&lt;/p&gt;

&lt;p&gt;나는 Wiki interface를 만들고, 위키문서를 HTML로 변환하기 위한 &lt;strong&gt;Parser()&lt;/strong&gt;메서드를 등록했다. 개발자는 새로운 위키 파서가 필요할 경우 구조체를 만들고 &lt;strong&gt;Parser()&lt;/strong&gt; 메서드만 만들면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

// Interface를 만들었다.
type Wiki interface {
    Parser(string) string
}

// MediaWiki 엔진 구현을 위한 구조체
type MediaWiki struct {
    Type string
}

// MediaWiki 파서 실제 구현
func (m MediaWiki) Parser(a string) string {
    return &amp;quot;Moniwiki &amp;quot; + a
}

// 마크다운 엔진 구현을 위한 구조체
type MarkDown struct {
    Type string
}

// 마크다운 파서 실제 구현
func (m MarkDown) Parser(a string) string {
    return &amp;quot;Markdown &amp;quot; + a
}

func main() {
    md := MarkDown{Type: &amp;quot;MarkDown&amp;quot;}
    me := MediaWiki{Type: &amp;quot;MoniWiki&amp;quot;}

    // 위키엔진 저장을 위한 map 자료구조를 만들었다.
    WikiEngine := make(map[string]Wiki, 2)
    WikiEngine[&amp;quot;markdown&amp;quot;] = md
    WikiEngine[&amp;quot;mediawiki&amp;quot;] = me

    // MarkDown과 MediaWiki는 서로다른 구조체다.
    // 하지만 Wiki interface로 서로 연결이 됐다.
    for _, value := range WikiEngine {
        fmt.Println(value.Parser(&amp;quot;Text Data&amp;quot;))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실제 위키엔진 구현이라면 설정으로 위키 엔진 정보를 읽어온 다음, 맵에 저장할 것이다. 그 후 문서의 타입에 따라서 적당한 Parser()메서드를 호출할 것이다. interface를 이용하면, 같은 이름의 메서드라고 하더라도 다른 구현을 할 수 있다. 즉 객체지향의 &lt;strong&gt;다형성&lt;/strong&gt;을 구현할 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;empty-interface&#34;&gt;empty interface&lt;/h2&gt;

&lt;p&gt;Go의 interface는 가상 메서드만 가진다고 했다. 가상 메서드도 가지지 않으면 &lt;strong&gt;빈 인터페이스(empty interface: &amp;ldquo;interface{}&amp;rdquo;)&lt;/strong&gt;가 된다. 흔히 빈 인터페이스는 &lt;strong&gt;어떠한 타입이라도 사용 할 수 있다&lt;/strong&gt;라고 생각하곤 하는데, 그렇지 않다. 빈 인터페이스에는 인터페이스 타입을 사용해야 한다. 아래 코드를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DoSomething(v interface{}) {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DoSomething는 &lt;strong&gt;빈 인터페이스 타입인 v&lt;/strong&gt;를 매개변수로 취하고 있다. 여기에 인터페이스 타입의 값을 넘기면, Go언어는 런타임에 형 변환(Type conversion - 언제나 가능한 건 아니다)을 한 후, 정적 타입의 값으로 변경해서 넘긴다. 아래 예제를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func PrintAll(vals []interface{}) {
    for _, val := range vals {
        fmt.Println(val)
    }
}

func main() {
    names := []string{&amp;quot;stanley&amp;quot;, &amp;quot;david&amp;quot;, &amp;quot;oscar&amp;quot;}
    PrintAll(names)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/4DuBoi2hJU&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;코드를 실행하려 하면 &lt;strong&gt;main.go:15: cannot use names (type []string) as type []interface {} in argument to PrintAll&lt;/strong&gt; 에러가 떨어진다. 타입이 맞지 않기 때문이다. 아래와 같이 타입을 맞춰줘야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func PrintAll(vals []interface{}) {
    for _, val := range vals {
        fmt.Println(val)
    }
}

func main() {
    names := []string{&amp;quot;stanley&amp;quot;, &amp;quot;david&amp;quot;, &amp;quot;oscar&amp;quot;}
    vals := make([]interface{}, len(names))
    for i, v := range names {
        vals[i] = v
    }
    PrintAll(vals)

    age := []int{38, 27, 42}
    vals = make([]interface{}, len(age))
    for i, v := range age {
        vals[i] = v
    }
    PrintAll(vals)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/h7RA5hfMad&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;빈 인터페이스를 적절하게 사용하는 메서드로 &lt;strong&gt;fmt.Printf&lt;/strong&gt;가 있다. Printf 메서드는 다양한 타입의 값을 매개변수로 받아서 처리해야 하는데 이 때 빈 인터페이스를 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Printf(format string, a ...interface{}) (n int, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;빈 인터페이스를 이용해서 하나의 메서드로 여러 데이터를 처리하는 예제 코드다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)

type Stringer interface {
    String() string
}

func ToString(any interface{}) string {
    if v, ok := any.(Stringer); ok {
        return v.String()
    }

    switch v := any.(type) {
    case int:
        return strconv.Itoa(v)
    case float64:
        return strconv.FormatFloat(v, &#39;f&#39;, 4, 64)
    }
    return &amp;quot;???&amp;quot;
}

type User struct {
    Name string
}

func (u User) String() string {
    return u.Name
}

func main() {
    fmt.Println(ToString(1234))
    fmt.Println(ToString(17.4))
    fmt.Println(ToString(&amp;quot;Hello World&amp;quot;))
    fmt.Println(ToString(User{&amp;quot;yundream&amp;quot;}))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/dlzNKsm00V&#34;&gt;코드 실행&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;매개변수로 넘어온 (빈 인터페이스 타입의)데이터를 연산하기 위해서는, 데이터의 타입을 알아야 한다. &lt;strong&gt;reflect.TypeOf()&lt;/strong&gt;혹은 &lt;strong&gt;type assertions&lt;/strong&gt;를 이용해서 데이터 타입을 알 수 있다. 예제 코드에서는 type assertion(any.(type))을 이용하고 있다.&lt;/p&gt;

&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luciotato/golang-notes/blob/master/OOP.md&#34;&gt;golang oop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go&#34;&gt;How to use interfaces in go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go의 주요 특징들</title>
      <link>https://golangkorea.github.io/post/go-start/feature/</link>
      <pubDate>Mon, 12 Sep 2016 13:10:03 +0900</pubDate>
      
      <guid>https://golangkorea.github.io/post/go-start/feature/</guid>
      <description>

&lt;h2 id=&#34;단순함&#34;&gt;단순함&lt;/h2&gt;

&lt;p&gt;Go 언어는 단순함(simplicity)과 실용성(pragmatism)을 지향하는 언어로 이 두가지 철학이 다른 모든 것들 보다 상위에 있다. go 언어에 없는 것들을 보자.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;패턴매칭&lt;/li&gt;
&lt;li&gt;함수 프로그래밍 : 어느 정도 특징을 가지고 있기는 하지만 지향점은 아니다.&lt;/li&gt;
&lt;li&gt;immutable variables&lt;/li&gt;
&lt;li&gt;Option types : 값외에 유효한지, 초기화가 됐는지 등의 추가적인 정보를 설정할 수 있다.&lt;/li&gt;
&lt;li&gt;예외(exception)가 없다.&lt;/li&gt;
&lt;li&gt;클래스도 없다.&lt;/li&gt;
&lt;li&gt;제너릭(generics)를 지원하지도 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현대적인 언어들이라면 당연히 가지고 있음직한 굵직한 특성들을 가지고 있지 않다. 심지어 &amp;ldquo;Go는 40년 동안의 프로그래밍 언어에 대한 연구를 던져버린 유일한 언어&amp;rdquo;라고 평가를 받기도 한다(제너릭의 경우 지원하려는 움직임이 있는 것 같기는 하다). 그리고 이러한 철학을 그대로 하고 있는데, 1.0 버전이 나온 이후 1.7 까지 문법적인 변화가 거의 없다.&lt;/p&gt;

&lt;p&gt;1.0 이 나온게 2012년이니 5년 동안 변한게 없다는 이야기다. 따라서 개발자는 호환성 문제에서 자유로우며, 기술에 대한 숙련도를 꾸준히 유지 할 수 있다. 단순함을 포기하지 않기 때문에 가능한 일이다. &lt;a href=&#34;https://golang.org/doc/devel/release.html&#34;&gt;Go release History&lt;/a&gt;에서 버전별 변경점을 찾아 볼 수 있는데, 버그 수정, 지원 플랫폼, 툴 추가, 컴파일러 변경, 가비지 컬랙터 효율화 등 언어 내적인 것들이 대부분이다.&lt;/p&gt;

&lt;p&gt;계속 단순함을 유지하면서, 언어적인 발전이 가능 할 것인지에 대한 의구심을 가질 수 있다. 이렇게 생각해보자. 복싱은 주먹을 사용하는 격투기 중 최고로 평가받고 있다. 그런데 복싱이 가지고 있는 기술이라는게 스트레이트, 잽, 어퍼, 훅 4가지 밖에 없다. 기술이 적기 때문에 시작하기가 쉽고 반복훈련을 통해서 빠르게 기량을 높일 수 있다. 그리고 직관적인 만큼 실전에서의 응용이 용이하다.&lt;/p&gt;

&lt;p&gt;Go 언어도 마찬가지다. 1-2주면 언어의 거의 모든 기능에 익숙해질 수 있으며, 반복 훈련을 통해서 빠르게 기량을 높일 수 있다. 코드가 직관적이기 때문에 코드를 만들고 읽는게 쉬우며 그만큼 실전에 빠르게 써먹을 수 있다.&lt;/p&gt;

&lt;p&gt;물론 언어의 단순함이 모든 경우에 장점이 될 수는 없을 것이다. Go 언어는 시스템, 네트워크 프로그램 특히 클라우드 환경에서 작동하는 프로그램의 개발에는 강력한 면모를 보여주지만 모바일, 데스크탑 애플리케이션에도 강점을 보여줄지는 의문이다(애초에 이쪽은 별로 신경을 쓰고 있지 않기 때문에 판단하기는 애매모호하긴 하다).&lt;/p&gt;

&lt;h2 id=&#34;클라우드와-친한-go-언어&#34;&gt;클라우드와 친한 go 언어&lt;/h2&gt;

&lt;p&gt;단순함과 이로부터 파생되는 특징은 클라우드 환경에 잘 맞는 경향이 있다. 분산환경은 시스템이 분산된다는 의미외에 소프트웨어가 분산된다는 의미도 있다. 이런 환경에서는 소프트웨어들이 많은 기능을 가지고 있을 필요가 없다. 필수적인 기능만 가진 여러 소프트웨어들이 서로 데이터를 주고 받는 식으로 작동을 하는게 더 효율적이다. 이런 소프트웨어 운영 모델은 리눅스에서 찾아볼 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ps aux | grep chorm | grep -v grep | awk &#39;{print $2}&#39; | xargs kill 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ps로 프로세스 목록을 출력하면 grep으로 chrom 프로세스의 정보만 가져오고, awk를 이용해서 &lt;strong&gt;PID&lt;/strong&gt;를 읽어서 kill로 죽이는 일을 하는 스크립트다. 클라우드환경에서 뜨는 &lt;strong&gt;MSA&lt;/strong&gt;(go언어를 이용한 MSA 문서를 만들어봐야 겠다.)가 이런 방식으로 작동한다.&lt;/p&gt;

&lt;p&gt;클라우드는 컴퓨터와 네트워크, 운영체제를 하나로 통합한다. 이런 환경에서 프로그래밍 언어의 버전, 라이브러리 의존성을 신경쓰면서 애플리케이션을 배포하는 건 굉장히 어려운 일이다. 최근 도커(docker)가 핫한 것도 운영체제 등 주변환경이 어떻든지 간에 자유롭게 배포 할 수 있고, 동일하게 작동 할 것을 보장해 주기 때문이다.&lt;/p&gt;

&lt;p&gt;Go 언어로도 이런 개발 &amp;amp; 배포 환경을 만들 수 있다. 도커와 함께 클라우드를 위한 컨테이너 솔류션을 만들고 싶다면 Go는 최고의 선택이 될 것이다.&lt;/p&gt;

&lt;h2 id=&#34;struct를-이용한-객체지향&#34;&gt;struct를 이용한 객체지향&lt;/h2&gt;

&lt;p&gt;Go는 클래스와 객체가 없다. 그렇다고 해서 객체지향 언어가 아니라고 하기도 그렇다. 원래 객체지향이라는 것은 프로그래밍 방법론으로 언어와 상관이 있는 것은 아니다. C언어로도 객체지향을 할 수 있고, C++로도 절차지향을 할 수 있다. 다만 얼마나 객체지향 프로그래밍을 잘 지원하느냐에 대한 차이는 있는데, 표면적으로는 클래스와 객체가 있는지를 기준으로 삼는 경우가 많다. 상속역시 지원하지 않는다. Go는 전통적인 의미에서의 객체지향 언어라고 하기는 애매모호 하다.&lt;/p&gt;

&lt;p&gt;하지만 메서드를 만들 수 있으며, interface를 이용해서 다형성을 구현 할 수도 있다. &lt;strong&gt;composition&lt;/strong&gt;으로 상속을 대신 할 수도 있다. 뭔가 편법을 동원한다는 느낌이 들 수도 있겠지만, 객체지향에 있어서 반드시 무엇을 해야 한다는 어떤 규칙은 없다. Sandi Metz은 이렇게 말하고 있다. &amp;ldquo;객체지향에 있어서 클래스와 상속은 옵션이며, 한 문제는 다양한 방법으로 풀 수 있다.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;struct는 하나 이상의 필드들로 구성된 데이터 타입으로 레코드 형식의 데이터 그룹을 만들기 위해서 사용한다. 개인 정보를 다루는 애플리케이션을 개발한다면 아래와 같은 &lt;strong&gt;person&lt;/strong&gt; 스트럭처를 만들 수 있을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type person struct {
    name string
    age  int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;소프트웨어 공학에서 기본적으로 클래스는 속성과 메서드의 모음으로 표현된다. 파이썬의 경우를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    minAge = 0
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def Hello(self):
        print(&amp;quot;Hello. My name is %s&amp;quot; % self.name)
    def MyAge(self):
        print(&amp;quot;My age is %s&amp;quot; % self.age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;minAge와 self.name, self.age라는 속성과 Hello, MyAge라는 메서드를 가지는 Person 클래스를 만들었다. 일반적으로 알고 있는 클래스의 모습이다.&lt;/p&gt;

&lt;p&gt;반면 go는 struct와 메서드가 서로 분리된다. 위의 파이썬 코드를 go 코드로 만들어봤다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Person struct {
    minAge int
    name   string
    age    int
}

func (p Person) Hello() {
    fmt.Printf(&amp;quot;Hello. My name is %s\n&amp;quot;, p.name)
}

func (p Person) MyAge() {
    fmt.Printf(&amp;quot;My age is %d\n&amp;quot;, p.age)
}

func main() {
    yundream := Person{minAge: 0, name: &amp;quot;yundream&amp;quot;, age: 33}
    yundream.Hello()
    yundream.MyAge()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/Slj3hhovW4&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;뭔가 굉장히 낯설어 보인다. 일단 캡슐화는 지원한다. 보통 &lt;strong&gt;private, public&lt;/strong&gt; 키워드를 이용하는데, Go언어에는 이런게 없다. 대신 대/소 문자로 구분을 한다. 대문자로 시작하면 public, 소문자로 시작하면 private가 되는 식이다.  private 변수나 메서드는 패키지 내에서만 사용 할 수 있다.&lt;/p&gt;

&lt;p&gt;메서드가 구조체와 분리되기 때문에, 이 메서드가 어느 구조체에 연결된 것인지를 구분해야 한다. &lt;strong&gt;수신자(receiver - func 키워드와 함수명 사이에 위치한다)&lt;/strong&gt;를 이용해서, 연결된 구조체를 확인 할 수 있다. 메서드는 &lt;strong&gt;.&lt;/strong&gt; 연산자를 이용해서 호출 할 수 있다.&lt;/p&gt;

&lt;p&gt;Go는 생성자가 없다. 예제에서 처럼, 구조체를 생성 할 때 초기값을 할당 하거나 혹은 구조체 객체의 포인터를 반환하는 &lt;strong&gt;New&lt;/strong&gt; 함수를 만들어서 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func New(minAge int, name string, int age) *Person {
    return &amp;amp;Person{minAge: minAge, name: name, age: age}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;에러-처리&#34;&gt;에러 처리&lt;/h2&gt;

&lt;p&gt;Go는 예외(execption)가 없다. C언어와 같이 반환 값이 에러인지 아닌지를 비교하는 방법으로 에러를 처리한다. 대신 에러만을 전문적으로 처리하는 &lt;strong&gt;error&lt;/strong&gt; 타입을 내장하고 있다. Go 프로그램은 error 값을 검사하는 것으로 에러 상태를 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 go는 두 개 이상의 값을 반환 할 수 있다. 이 특징을 이용하면 실행 반환 값과 에러를 함께 넘기는 방식으로 에러를 처리할 수 있다. 예를 들어 os.Open 함수는 열린 파일의 데이터를 담고 있는 File 구조체와 error를 함께 반환한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Open(name string) (file *File, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;코드에서는 error 값이 &amp;ldquo;nil&amp;rdquo;인지 아닌지로 에러를 검사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;f, err := os.Open(&amp;quot;filename.txt&amp;quot;)
if err != nil {
    fmt.Println(&amp;quot;File open error : &amp;quot;, err.Error())
    os.Exit(1)
}
// 파일 처리
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;예외 처리가 없기 때문에 C 언어처럼 모든 에러 리턴에 대한 코드를 만들어야 한다. 함수를 만들다 보면 에러처리 코드가 절반이상을 차지하는 것을 심심찮게 볼 수 있다.&lt;/p&gt;

&lt;p&gt;개발자는 &lt;strong&gt;errors&lt;/strong&gt; 패키지를 이용해서 직접 에러를 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;errors&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
)

func YourLevel(point int) (int, error) {
    if point &amp;lt; 0 {
        return 0, errors.New(&amp;quot;Level: 레벨 값은 0보다 커야 합니다.&amp;quot;)
    }
    if point &amp;gt; 255 {
        return 0, errors.New(&amp;quot;Level: 레벨 값은 255보다 작아야 합니다.&amp;quot;)
    }
    return point / 10, nil
}

func main() {
    level, err := YourLevel(25)
    if err != nil {
        fmt.Println(&amp;quot;Error &amp;quot;, err.Error())
        os.Exit(1)
    }
    fmt.Printf(&amp;quot;당신의 레벨은 %d 입니다.\n&amp;quot;, level)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/zKZHQ7Obm1&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;실제 코드에서는 아래와 같이 에러 케이스를 정의해서 사용한다. 위 코드를 약간 수정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var StatusPointUnderZero = errors.New(&amp;quot;Level: 레벨 값은 0보다 커야 합니다.&amp;quot;)
var StatusPointOverflow = errors.New(&amp;quot;Level: 레벨 값은 255보다 작아야 합니다.&amp;quot;)

func YourLevel(point int) (int, error) {
    if point &amp;lt; 0 {
        return 0, StatusPointUnberZero
    }   
    if point &amp;gt; 255 {
        return 0, StatusPointOverflow
    }   
    return point / 10, nil
}   
func main() {
    level, err := YourLevel(25)
    switch err {
    case StatusPointUnberZero:
        // 에러처리 코드
    case StatusPointOverflow:
        // 에러처리코드
    default:
        // 에러처리 코드
    }  
    fmt.Printf(&amp;quot;당신의 레벨은 %d 입니다.\n&amp;quot;, level)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다른 예제를 이용해서 &lt;strong&gt;error&lt;/strong&gt;를 이용한 에러 처리가 가지는 장점을 살펴보자. 아래 프로그램은 입력 값이 양수인지 음수인지를 검사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

// Positive returns true if the number is positive, false if it is negative.
func Positive(n int) bool {
        return n &amp;gt; -1
}

func Check(n int) {
        if Positive(n) {
                fmt.Println(n, &amp;quot;is positive&amp;quot;)
        } else {
                fmt.Println(n, &amp;quot;is negative&amp;quot;)
        }
}

func main() {
	Check(1)
	Check(0)
	Check(-1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/oMfSuAqw74&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로그램의 실행 결과다. 버그를 가지고 있음을 알 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 is positive
0 is positive
-1 is negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0은 양수도 아니고 음수도 아니다. 양수, 음수, 0 이렇게 3개의 상태를 가지기 때문에 boolean 으로는 이들 상태를 처리 할 수없다.&lt;/p&gt;

&lt;p&gt;Go언어는 2개 이상의 반환 값을 가질 수 있으므로, 0인지를 측정 할 수 있는 값을 반환하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 입력값이 0일 경우 두번째 리턴값으로 false를 반환한다.
func Positive(n int) (bool, bool) {
    if n == 0 {
        return false, false
    }
    return n &amp;gt; -1, true
}

func Check(n int) {
    pos, ok := Positive(n)
    if !ok {
        fmt.Println(n, &amp;quot;is neither&amp;quot;)
        return
    }
    if pos {
        fmt.Println(n, &amp;quot;is positive&amp;quot;)
    } else {
        fmt.Println(n, &amp;quot;is negative&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;프로그램을 실행해보자. 버그가 잡혔다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 is positive
0 is neither
-1 is negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;문제없이 작동하지만 좋은 코드는 아니다. 일단 직관적이지 않다. 코드를 열어 보기 전에는 두 개의 boolean 반환 값이 무엇을 의미하는지 알 수가 없다. error를 이용해서 0 값을 예외처리 하도록 바꿔보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Positive(n int) (bool, error) {
    if n == 0 {
        return false, errors.New(&amp;quot;undefined&amp;quot;)
    }
    return n &amp;gt; -1, nil
}

func Check(n int) {
    pos, err := Positive(n)
    if err != nil {
        fmt.Println(n, err)
        return
    }
    if pos {
        fmt.Println(n, &amp;quot;is positive&amp;quot;)
    } else {
        fmt.Println(n, &amp;quot;is negative&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하는 일은 차이가 없으나 코드가 명료해졌다.&lt;/p&gt;

&lt;h2 id=&#34;동시성-프로그래밍&#34;&gt;동시성 프로그래밍&lt;/h2&gt;

&lt;p&gt;Go에서 제공하는 고루틴이라고 기능을 이용해서 다른 함수를 동시에 실행 할 수 있다. 쓰레드와 비슷하게 작동한다. Go에서 고루틴은 &lt;strong&gt;일급 객체(first class)&lt;/strong&gt;로 정수(integer)나 실수(floating point number)와 같은 데이터 타입과 동급으로 취급한다. 일급객체에 대해서는 &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_citizen&#34;&gt;wikipedia 문서 &lt;/a&gt;를 참고하자. 아래 예제 코드를 보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func f(id int) {
    for i := 0; i &amp;lt; 10; i++ {
        fmt.Println(id, &amp;quot;:&amp;quot;, i)
    }
}

func main() {
    go f(0)
    var input string
    fmt.Scanln(&amp;amp;input)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 키워드 뒤에 동시 실행할 함수를 두면, 해당 함수를 실행하는 고루틴이 만들어진다. 고루틴과 main함수는 서로 독립적으로 진행이 된다. main 함수가 고루틴 보다 먼저 종료 할 수 있기 때문에 &lt;strong&gt;Scanln&lt;/strong&gt; 함수를 이용해서 기다리게 했다.&lt;/p&gt;

&lt;p&gt;10개의 고루틴을 만들어보자. 그냥 go를 열번 호출하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run goroutine.go 
0 : 0
0 : 1
0 : 2
0 : 3
0 : 4
0 : 5
0 : 6
0 : 7
0 : 8
0 : 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;채널(channel)은 고루틴들 간에 데이터를 교환하기 위해서 사용한다. Go도 공유 잠금을 지원하기는 하지만 메시지 교환방식을 선호한다. 아래는 고루틴간 ping 메시지를 교환하는 간단한 프로그램이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func pinger(c chan string) {
    for i := 0; ; i++ {
        c &amp;lt;- &amp;quot;ping&amp;quot;
    }
}

func pingPrinter(c chan string) {
    for {
        msg := &amp;lt;-c
        fmt.Println(msg)
        time.Sleep(time.Second * 1)
    }
}

func main() {
    var c chan string = make(chan string)

    go pinger(c)
    go pingPrinter(c)

    var input string
    fmt.Scanln(&amp;amp;input)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;chan&lt;/strong&gt; 키워드를 이용해서 채널 타입 데이터를 만들 수 있다. 채널은 메시지를 주고 받는 통로 역할을 하는데 struct를 포함한 모든 종류의 데이터들을 주고 받을 수 있다. 코드에서는 string 타입 데이터를 위한 채널을 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;-&lt;/strong&gt; 연산자를 이용해서 채널에 데이터를 쓰거나 읽을 수 있다. &lt;strong&gt;c &amp;lt;- &amp;ldquo;ping&amp;rdquo;&lt;/strong&gt;는 채널에 &amp;ldquo;ping&amp;rdquo;을 쓰겠다는 의미고, &lt;strong&gt;msg := &amp;lt;-c&lt;/strong&gt;는 채널에서 읽은 데이터를 msg에 저장하겠다는 의미다.&lt;/p&gt;

&lt;h2 id=&#34;인터페이스&#34;&gt;인터페이스&lt;/h2&gt;

&lt;p&gt;인터페이스는 &lt;strong&gt;메서드&lt;/strong&gt;들의 모음으로 간단히 정의 할 수 있다. 또한 그 자체로 하나의 타입이기도 하다. 메서드들의 형태만 정의하고, 구현은 외부에 맡기는 방식으로 유연한 코드를 만들 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type Shape interface {
    Area() float64
    Type()
}

type Rectangle struct {
    width  float64
    height float64
}

func (r Rectangle) Area() float64 {
    return r.width * r.height
}

func (r Rectangle) Type() {
    fmt.Println(&amp;quot;I&#39;m rectangle&amp;quot;)
}

type Circle struct {
    radius float64
}

func (c Circle) Area() float64 {
    return math.Pi * c.radius * c.radius
}

func (c Circle) Type() {
    fmt.Println(&amp;quot;I&#39;m circle&amp;quot;)
}

func main() {
    rec := []Shape{
        Rectangle{width: 10, height: 20},
        Circle{radius: 12},
    }

    for _, s := range rec {
        s.Type()
        fmt.Println(&amp;quot;Area :&amp;quot;, s.Area())
        fmt.Println(&amp;quot;===========&amp;quot;)
    }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행 결과&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I&#39;m rectangle
Area : 200
===========
I&#39;m circle
Area : 452.3893421169302
===========
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;웹-프로그래밍&#34;&gt;웹 프로그래밍&lt;/h3&gt;

&lt;p&gt;Go는 특히 MSA모델의 웹 애플리케이션 개발을 잘 지원한다. 기본으로 지원하는 &lt;strong&gt;net/http&lt;/strong&gt;와 &lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;gorilla&lt;/a&gt;만으로도 훌륭하게 작동하는 웹 애플리케이션 서버를 개발 할 수 있다. 다른 프레임워크를 사용할 필요가 없다. &lt;a href=&#34;http://www.joinc.co.kr/w/man/12/golang/HTTPPerf&#34;&gt;그리고 성능도 매우 뛰어나다&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;아래는 net/http와 gorilla를 이용해서 만든 간단한 웹 애플리케이션 서버다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/gorilla/mux&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;strconv&amp;quot;
)

func hello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &amp;quot;Hello world&amp;quot;)
}

func sum(w http.ResponseWriter, r *http.Request) {
    v := mux.Vars(r)
    a, _ := strconv.Atoi(v[&amp;quot;a&amp;quot;])
    b, _ := strconv.Atoi(v[&amp;quot;b&amp;quot;])
    fmt.Fprintf(w, &amp;quot;%d&amp;quot;, a+b)
}
func main() {
    h := mux.NewRouter()
    h.HandleFunc(&amp;quot;/hello&amp;quot;, hello).Methods(&amp;quot;GET&amp;quot;)
    h.HandleFunc(&amp;quot;/sum/{a}/{b}&amp;quot;, sum).Methods(&amp;quot;GET&amp;quot;)
    http.Handle(&amp;quot;/&amp;quot;, h)
    http.ListenAndServe(&amp;quot;:3000&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;군더더기를 찾아볼 수 없는 단순하고 이해하기 쉬운 코드다.&lt;/p&gt;

&lt;h3 id=&#34;유닛테스트&#34;&gt;유닛테스트&lt;/h3&gt;

&lt;p&gt;Go언어는 분산환경에 최적화된 측면이 있다. 분산환경에서는 테스트해야 할 기능이 명확하기 때문에 유닛테스트의 효과를 크게 누릴 수 있다. 특히 Go 언어는 &lt;strong&gt;Simple is best&lt;/strong&gt; 철학을 지향하기 때문에, 유닛테스트의 활용이 중요하다. Go가 유닛테스트를 기본으로 제공하는 것도 이런 이유 때문일 것이다.&lt;/p&gt;

&lt;p&gt;유닛 테스트를 위해서 &lt;strong&gt;mymath&lt;/strong&gt;라는 간단한 패키지를 만들었다. 이 코드는 &lt;a href=&#34;https://github.com/yundream/mymath&#34;&gt;github&lt;/a&gt;에서 다운로드 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mymath

import (
    &amp;quot;errors&amp;quot;
)

var (
    StatusDivideZero = errors.New(&amp;quot;Divide zero&amp;quot;)
)

func Div(a float64, b float64) (float64, error) {
    if b == 0 {
        return 0, StatusDivideZero
    }
    return a / b, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래는 테스트 코드다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mymath

import (
    &amp;quot;testing&amp;quot;
)

func Test_Div(t *testing.T) {
    _, err := Div(1, 0)
    if err != StatusDivideZero {
        t.Error(&amp;quot;Divide zero&amp;quot;)
    }
    v, err := Div(10, 5)
    if v != 2 {
        t.Fatal(&amp;quot;10/5 = 2 but &amp;quot;, v)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;go test&lt;/strong&gt; 명령을 실행하면, 현재 패키지 디렉토리에 있는 파일에서 테스트 코드를 찾아서 실행 한다. 함수의 이름이 &lt;strong&gt;Test&lt;/strong&gt; 로 시작하고 *testing.T 를 매개변수로 사용하면 테스트 함수인 것으로 간주한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test
PASS
ok  	github.com/yundream/mymath	0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-cover&lt;/strong&gt; 옵션을 이용하면 테스트 커버리지 레포팅도 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;# go test -cover
PASS
coverage: 100.0% of statements
ok  	github.com/yundream/mymath	0.001s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go는 함수 단위의 유닛 테스트 도구 뿐만 아니라 웹 애플리케이션 서버 단위의 테스트 툴도 제공한다. 직접 웹 서버를 실행해서 핸들러들을 테스트하고 커버리지를 측정하는 식으로 작동한다. 웹 애플리케이션 서버 개발 편에서 자세히 다뤄볼 계획이다.&lt;/p&gt;

&lt;h3 id=&#34;문서화&#34;&gt;문서화&lt;/h3&gt;

&lt;p&gt;코드 문서화 도구까지 기본 툴로 제공하고 있다.&lt;/p&gt;

&lt;h3 id=&#34;마치며&#34;&gt;마치며&lt;/h3&gt;

&lt;p&gt;여기에서는 Go 언어의 주요 특징들만 간단하게 살펴봤다. 자세한 내용들은 주제별로 따로 다루도록 하겠다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go언어 시작하기</title>
      <link>https://golangkorea.github.io/post/go-start/getting-start/</link>
      <pubDate>Sun, 28 Aug 2016 15:10:07 +0830</pubDate>
      
      <guid>https://golangkorea.github.io/post/go-start/getting-start/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://digveloper.ppillip.com/wp-content/uploads/2013/04/appenginegophercolor.jpg&#34; alt=&#34;Go 로고&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;go-언어에-대해서&#34;&gt;Go 언어에 대해서&lt;/h2&gt;

&lt;p&gt;구글이 2009년에 만든 비교적 새로운 프로그래밍 언어다. 2009년이면 거의 7년 이상된 구닥다리 언어잖아? 라고 생각 할 수 있겠으나, Ruby(1996년) 나 python(1991년) 과 비교해보면 느낌이 다를 것이다. V8 자바스크립트 엔진 개발에 참여했던 &lt;strong&gt;Robert Griesemer&lt;/strong&gt;, UTF-8을 만든 &lt;strong&gt;Rob Pike&lt;/strong&gt;, 초창기 유닉스 운영체제를 설계했으며 B언어(C언어의 전신)를 개발한 &lt;strong&gt;Ken Thompson&lt;/strong&gt;등 쟁쟁한 개발자들이 만든 언어다. 구글이 개발 했다는 프리미엄과 함께 &lt;strong&gt;도커(Docker)&lt;/strong&gt;의 개발 언어라는게 알려지면서 유명세를 타게 됐다.&lt;/p&gt;

&lt;p&gt;Python이나 Java와 같은 범용 프로그래밍 언어이며, 시스템 프로그래밍과 네트워크 프로그램의 개발을 목표로 만들어진 언어다. 비교적 최근에 만들어진 언어답게 C++, Java, Python 언어들의 장점을 상당 부분 수용했다. 이렇게 보면 최신 프로그래밍 언어들의 트랜드를 따를 것 같지만 코드는 &lt;strong&gt;C 언어&lt;/strong&gt;와 매우 비슷한 느낌을 준다.&lt;/p&gt;

&lt;p&gt;C 언어 처럼 컴파일이 되며, 컴파일 시간에 타입을 체크하는 정적 타입 언어다. 그리고 C 언어처럼 단순하다. 약 25개 정도의 키워드만이 제공되는데, 실제 코드를 만들다 보면 10개 내외의 키워드 만으로 프로그래밍이 가능하다. 아래 go 언어가 제공하는 키워드들이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;프로그래밍 언어에 대한 경험이 있다면 chan, defer, fallthrough 등을 제외한 키워드들의 이름과 용도를 미루어 짐작할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;키워드가 적은 만큼 복잡한 준비작업 없이 쉽게 시작 할 수 있으며, 몇 개의 키워드로 반복 사용 함으로써 프로그래밍 숙련도를 빠르게 높일 수 있다는 것도 큰 장점이다.&lt;/p&gt;

&lt;p&gt;Go 언어는 &lt;strong&gt;동시성(concurrency)&lt;/strong&gt;를 잘 지원하는 것으로 유명하다. Go는 &lt;strong&gt;고루틴(goroutine)&lt;/strong&gt;라는 경량스레드(lightweight thread)를 제공하는데, 고루틴간 메시지를 주고 받을 수 있는 채널(channel)을 이용하면, 아주 쉽게(정말 쉽다) 동시성 프로그램을 개발 할 수 있다. 고루틴은 얼랑(Erlang)의 경량 쓰레드와 매우 유사한데, &lt;strong&gt;2k&lt;/strong&gt; 정도로 그 크기가 매우 작다. 많은 수의 고루틴을 시스템 부담을 최소화 하면서 만들 수 있다.&lt;/p&gt;

&lt;p&gt;Go 언어를 사용하다보면, 웹 애플리케이션을 만들기가 매우 편하다는 느낌을 받게 된다. 특히 &lt;strong&gt;MSA(Microservice Architecture)&lt;/strong&gt;와 &lt;strong&gt;REST(Representational State Transfer)&lt;/strong&gt; 모델의 애플리케이션을 쉽게 만들 수 있다. 루비나 파이선 같은 언어의 경우 다양한 &lt;strong&gt;웹 프레임워크&lt;/strong&gt;중에서 선택을 고민하게 마련인데, Go 언어는 기본으로 제공하는 &lt;strong&gt;net/http&lt;/strong&gt; 패키지로 충분하다. 물론 Go 언어도 다양한 마이크로 프레임워크와 풀 프레임워크를 제공하긴 하지만 이런 프레임워크를 쓰면, &amp;ldquo;왜 프레임워크를 쓰세요 ? 그냥 기본(net/http) 패키지 쓰세요&amp;rdquo;라는 말을 들을 정도로 강력하다.&lt;/p&gt;

&lt;p&gt;대규모의 분산 시스템을 유지해야 하는 구글의 요구를 위해서 웹 개발 관련 패키지가 강력해진 것 같다.&lt;/p&gt;

&lt;h2 id=&#34;go-시작하기&#34;&gt;Go 시작하기&lt;/h2&gt;

&lt;h3 id=&#34;go-설치&#34;&gt;Go 설치&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;golang.org&lt;/a&gt;에서 운영체제별로 Go 언어를 다운로드 할 수 있다. 2016년 8월 현재 최신 버전은 1.7이다. 압축을 푼 다음 &lt;strong&gt;/usr/local&lt;/strong&gt; 디렉토리로 복사했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz
# tar -xvzf go1.7.linux-amd64.tar.gz
# mv go /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 실행을 위해서 환경 변수를 설정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# export PATH=$PATH:/usr/local/go/bin
# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go를 실행해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# go version
go version go1.7 linux/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 작업 디렉토리 &amp;ldquo;&amp;lsquo;workspace&amp;rdquo;&amp;lsquo;를 만들었다. Go언어에게 작업 디렉토리를 알려주기 위해서 환경변수 &lt;strong&gt;GOPATH&lt;/strong&gt;도 설정했다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mkdir $HOME/workspace
# export GOPATH:$HOME/workspace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이들 환경변수들은 .bashrc 등에 설정해서, 로그인 시간에 적용되도록 하자.&lt;/p&gt;

&lt;p&gt;이것으로 go 언어 개발 환경을 마쳤다. 이제 Hello World 프로그램을 만들면서 Go 프로그램의 기본적인 특징들을 살펴보자.&lt;/p&gt;

&lt;h3 id=&#34;패키지-관리-시스템&#34;&gt;패키지 관리 시스템&lt;/h3&gt;

&lt;p&gt;Hello World 프로그램을 만들기 전에 Go 언어의 패키지 관리 시스템을 살펴봐야 할 것같다. 앞서 나는 workspace 라는 작업 디렉토리를 만들었다. 다른 프로그램이라면 workspace 디렉토리 밑에 프로젝트 파일을 만드는 것으로 개발을 시작할 것이다. 예컨데 mkdir workspace/helloworld 로 디렉토리를 먼저 만들 것이다.&lt;/p&gt;

&lt;p&gt;go 언어는 다르다. 우선 go 언어는 &lt;strong&gt;인터넷&lt;/strong&gt;을 기본 개발 환경으로 한다. Go로 원할히 개발하기 위해서는 컴퓨터가 인터넷에 연결되어 있어야 하며, 코드를 저장하고 읽기 위한 github, bitbucket 혹은 직접 구성한 git 서버가 있어야 한다. 즉 go 언어에서 패키지는 프로젝트 저장소 단위로 관리한다.&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;strong&gt;sqlite3&lt;/strong&gt;을 사용하는 애플리케이션을 개발한다고 가정해 보자. 이를 위해서 sqlite3 패키지를 go get으로 다운로드 해야 하는데 git 주소로 부터 다운로드 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/mattn/go-sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;거의 모든 패키지가 이처럼 인터넷 상에 있는 git으로 관리 되고 있다. sqlite3 패키지를 설치한 후 workspace를 살펴보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── pkg
│   └── linux_amd64
│       └── github.com
│           └── mattn
│               └── go-sqlite3.a
├── src 
|   └── github.com
|       └── mattn
|           └── go-sqlite3
|               ├── backup.go
|               ├── backup_test.go
|               ├── callback.go
|               ├── callback_test.go
└── bin 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패키지의 경로가 github 경로인 것을 확인 할 수 있다. 물론 인터넷에 연결하지 않고도 프로젝트를 수행 할 수는 있지만 제대로 go 프로그래밍을 하려면 인터넷과 github 계정이 필요하다. 아래 주요 디렉토리의 용도를 정리했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src : 패키지의 소스코드가 위치한다.&lt;/li&gt;
&lt;li&gt;pkg : 패키지의 소스코드를 빌드해서 만들어진 라이브러리 파일(.a - ar archive 파일)이 위치한다. go-sqlite3.a 파일이 보일 것이다.&lt;/li&gt;
&lt;li&gt;bin : 패키지가 main 함수를 포함할 경우 실행 파일이 만들어 지는데, 이들 실행파일이 복사된다. go-sqlite3는 실행파일이 없으므로 bin에 파일이 복사되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래에서 다룰 Hello World 프로젝트도 github 기반으로 진행 할 것이다. github 계정이 없다면 지금 계정을 만들자. 내가 사용하고 있는 github 계정은 &lt;strong&gt;yundream&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;h3 id=&#34;hello-world를-만들어보자&#34;&gt;Hello World를 만들어보자.&lt;/h3&gt;

&lt;p&gt;Hello World 프로젝트를 시작하기 위해서 내가 사용하는 github 계정에 helloworld 프로젝트를 만들었다. 프로젝트를 만들 때 &lt;strong&gt;Initialize this repository with a README&lt;/strong&gt; 옵션을 체크하자. 이제 go get 명령을 이용해서 패키지를 다운로드 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/yundream/helloworld
package github.com/yundream/helloworld: no buildable Go source files in /home/yundream/golang/src/github.com/yundream/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;지금은 README.md 파일만 있으므로 빌드 할 수 있는 go 파일이 없다는 경고메시지뜰 것이다. 무시하자. &lt;strong&gt;GOPATH&lt;/strong&gt; 환경에 등록된 /home/yundream/golang 디렉토리 밑에 패키지를 다운로드(README.md) 해서 설치하는 것을 확인 할 수 있을 것이다. 디렉토리로 이동해서 helloworld.go 파일을 만들어보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;Hello World&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;터미널에 &amp;ldquo;Hello World&amp;rdquo;를 출력하는 간단한 프로그램이다. go run 명령으로 실행해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run main.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go run은 임시디렉토리에서 코드를 컴파일 하고 실행하는 일을 한다. go가 컴파일 언어임에도 불구하고 (컴파일 시간이 매우빠르다)유저 입장에서는 인터프리터 언어처럼 사용 할 수 있다. python 같은 언어에 비해서는 즉시성이 떨어지기는 하지만 왠만한 프로젝트에서는 굳이 컴파일 과정을 거치지 않고도 바로 바로 실행 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;go build&lt;/strong&gt; 명령으로 소스코드를 컴파일 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go build
$ ls
README.md  helloworld  main.go
$ ./helloworld 
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 소스코드를 살펴보자. C 언어와 매우 비슷하다는 느낌을 받을 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패키지를 선언한다. 모든 go 언어는 패키지 선언으로 시작해야 한다. 이 패키지이름을 이용해서 코드를 조직화하고 재사용 할 수 있다. C언어와 유사하게 go 언어도 실행 프로그램과 라이브러리, 두 개의 코드 타입을 가지고 있다. 실행 프로그램이란 쉘 에서 명령을 내려서 직접 실행 할 수 있는 (우리가 일반적으로 알고 있는)프로그램이고, 라이브러리는 다른 프로그램에서 이용 할 수 있게 패키징된 코드의 모음이다. 실행 프로그램을 만들기 위한 go 코드는 반드시 &lt;strong&gt;package main&lt;/strong&gt;을 선언해야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;fmt&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;외부 패키지를 import 하기 위해서 사용한다. java의 import와 매우 유사하다. 위에서 go 코드는 실행 프로그램과 라이브러리 타입이 있다고 했던 것을 기억할 것이다. import는 라이브러리 타입의 go 코드를 재사용 하기 위해서 사용한다. 여기에서는 화면과 파일 출력에 관련된 여러 유용한 기능을 담고 있는 &lt;strong&gt;fmt&lt;/strong&gt; 패키지를 import했다. fmt는 git 저장소 경로가 없는데, go에서 제공하는 기본 패키지라고 보면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    fmt.Println(&amp;quot;Hello World&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 언어의 기본 구성요소는 함수이며, func 키워드로 정의해서 사용 할 수 있다. 이 함수의 이름은 main 이며, 0개의 매개변수(parameter)과 0개의 반환 값을 가지고 있다. main은 프로그램의 시작 점이 되는 특수한 함수다. 실행 가능한 타입의 go 코드는 반드시 하나의 main 함수를 가지고 있어야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;fmt&lt;/strong&gt;는 패키지 이름으로 해석하자면 fmt 패키지가 가지고 있는 &lt;strong&gt;Println&lt;/strong&gt; 함수를 사용해서 &amp;ldquo;Hello World&amp;rdquo;를 출력하라는 의미가 된다.&lt;/p&gt;

&lt;p&gt;빌드 성공까지 끝냈다면 main.go를 github 저장소에 push하자. 그리고 go get 으로 다시 패키지를 다운로드 해보자. go get으로 패키지를 설치 하면 소스코드들은 $GOPATH/src 밑에 설치된다. 만약 패키지가 실행 가능한 코드 즉 main 함수를 포함하고 있다면 빌드를 수행하고 그 결과를 $GOPATH:/bin 에 복사한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# $GOPATH/bin/helloworld
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go 프로젝트를 진행하다 보면, go get을 이용해서 go 기반의 소프트웨어들을 설치하게 될 것이다. 이들은 $GOPATH/bin에 설치가 되니, 실행을 위해서 환경변수 PATH에 &lt;strong&gt;$GOPATH/bin&lt;/strong&gt; 도 추가하자.&lt;/p&gt;

&lt;p&gt;만약 패키지를 지우고 싶다면 $GOPATH/src로 이동해서 패키지 디렉토리를(이 경우 $GOPATH/src/github.com/yundream/helloworld) 지워주기만 하면 된다.&lt;/p&gt;

&lt;h3 id=&#34;첫-번째-패키지-개발&#34;&gt;첫 번째 패키지 개발&lt;/h3&gt;

&lt;p&gt;이제 라이브러리 타입의 패키지를 만들어 보자. 패키지의 이름은 &lt;strong&gt;stringutil&lt;/strong&gt;로 문자열 조작과 관련된 함수들을 만들 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package stringutil

func Reverse(s string) string {
	r := []rune(s)
	for i, j := 0, len(r)-1; i &amp;lt; len(r)/2; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	return string(r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reverse 함수 하나만을 포함하고 있다. 매개변수로 받은 문자를 뒤집어서 반환하는 일을 한다.&lt;/p&gt;

&lt;p&gt;github 계정에 stringutil 저장소를 만들고 stringutil.go 파일을 push 한후, go get 으로 패키지를 다운로드하자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go get으로 설치된 패키지를 확인해보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# go list ... | grep yundream
github.com/yundream/helloworld
github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stringutil는 라이브러리 타입의 패키지로 빌드한 결과는 pkg/ 디렉토리 밑에 .a 파일로 저장된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# file $GOPATH/pkg/linux_amd64/github.com/yundream/stringutil.a
/home/yundream/golang/pkg/linux_amd64/github.com/yundream/stringutil.a: current ar archive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 helloworld 패키지에서 stringutil 패키지를 임포트해서 함수를 사용 할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;github.com/yundream/stringutil&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;Hello World !!&amp;quot;)
    val := stringutil.Reverse(&amp;quot;ABCDEF&amp;quot;)
    fmt.Println(val)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;실행해 보면 stringutil.Reverse 함수가 작동하는 걸 확인할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go run main.go 
Hello World !!
FEDCBA
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;one-파일-배포&#34;&gt;One 파일 배포&lt;/h3&gt;

&lt;p&gt;Go 언어에서 라이브러리 타입의 패키지들은 &lt;strong&gt;.a(정적 라이브러리)&lt;/strong&gt; 형태로 만들어진다. &lt;strong&gt;공유 라이브러리(Shared Library - 리눅스는 .so파일 윈도우즈는 dll)&lt;/strong&gt;를 지원하기는 하지만 운영체제에 따라 제한 적일 수 있다. 보통은 정적 라이브러리를 코드내에 포함해서 &lt;strong&gt;하나의 실행 파일로 배포&lt;/strong&gt;하는 방법을 사용한다.&lt;/p&gt;

&lt;p&gt;이 방법은 패키징이 단순해지며, 운영체제의 동적 라이브러리와의 호환문제에서 자유롭기 때문에 배포가 쉬워진다는 장점이 있다. 대신 라이브러리 코드가 포함되므로 코드가 더 커지고, 취약점이 있는 라이브러리에 대한 체크와 업데이트가 쉽지 않다는 문제가 있다. 특정 라이브러리에서 어떤 취약점이 발견됐다면, 해당 라이브러리를 포함한 모든 애플리케이션을 재 빌드 해야 한다.&lt;/p&gt;

&lt;p&gt;현대적인 애플리케이션들이 공유 라이브러리를 선호한다는 점에서 시대에 역행한다는 생각을 가질 수 있을 것이다. 이러한 방식을 선택한 이유를 생각해봐야 한다. 구글은 프라이빗한 클라우드 환경에서 작동하는 시스템 애플리케이션의 개발을 위해서 go 언어를 사용하고 있다. 다양한 운영체제와 운영 환경등을 가지고 있는 클라우드 환경에 애플리케이션을 배포하기 위해서는 외부 의존성을 없애고 빠르게 배포하는게 더 나을 것 이다. 프라이빗한 네트워크에서 실행되며, 직접 서비스에 관여하는 일도 없을 테니 취약점에 대한 대응 문제도 그리 심각하지 않을 것이다.&lt;/p&gt;

&lt;p&gt;클라우드와 같은 분산된 환경에서는 go 언어의 방식이 더 나을 수 있다.&lt;/p&gt;

&lt;h2 id=&#34;마치며&#34;&gt;마치며&lt;/h2&gt;

&lt;p&gt;테스트에 사용한 코드들은 아래 github에서 찾을 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yundream/helloworld&#34;&gt;https://github.com/yundream/helloworld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yundream/stringutil&#34;&gt;https://github.com/yundream/stringutil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# go get github.com/yundream/helloworld
# go get github.com/yundream/stringutil
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>